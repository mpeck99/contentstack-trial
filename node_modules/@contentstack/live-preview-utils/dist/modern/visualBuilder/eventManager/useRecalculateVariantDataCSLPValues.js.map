{"version":3,"sources":["../../../../src/visualBuilder/eventManager/useRecalculateVariantDataCSLPValues.ts"],"sourcesContent":["import { VisualBuilder } from \"..\";\nimport livePreviewPostMessage from \"../../livePreview/eventManager/livePreviewEventManager\";\nimport { LIVE_PREVIEW_POST_MESSAGE_EVENTS } from \"../../livePreview/eventManager/livePreviewEventManager.constant\";\nimport { DATA_CSLP_ATTR_SELECTOR } from \"../utils/constants\";\nimport { visualBuilderStyles } from \"../visualBuilder.style\";\n\nconst VARIANT_UPDATE_DELAY_MS: Readonly<number> = 8000;\n\ntype OnAudienceModeVariantPatchUpdate = {\n    highlightVariantFields: boolean;\n    expectedCSLPValues: Record<\"variant\" | \"base\", string>;\n};\n\n/**\n * Registers a post message event listener for updating the variant / base classes in the live preview for audience mode.\n */\nexport function useRecalculateVariantDataCSLPValues(): void {\n    livePreviewPostMessage?.on<OnAudienceModeVariantPatchUpdate>(\n        LIVE_PREVIEW_POST_MESSAGE_EVENTS.VARIANT_PATCH,\n        (event) => {\n            if (VisualBuilder.VisualBuilderGlobalState.value.audienceMode) {\n                updateVariantClasses(event.data);\n            }\n        }\n    );\n}\nfunction updateVariantClasses({\n    highlightVariantFields,\n    expectedCSLPValues,\n}: OnAudienceModeVariantPatchUpdate): void {\n    const variant = VisualBuilder.VisualBuilderGlobalState.value.variant;\n    const observers: MutationObserver[] = [];\n\n    // Helper function to update element classes\n    const updateElementClasses = (\n        element: HTMLElement,\n        dataCslp: string,\n        observer?: MutationObserver\n    ) => {\n        if (!dataCslp) return;\n\n        if (\n            dataCslp.startsWith(\"v2:\") &&\n            !element.classList.contains(\"visual-builder__variant-field\")\n        ) {\n            if (element.classList.contains(\"visual-builder__base-field\")) {\n                element.classList.remove(\"visual-builder__base-field\");\n            }\n            if (highlightVariantFields) {\n                element.classList.add(\n                    visualBuilderStyles()[\"visual-builder__variant-field\"],\n                    \"visual-builder__variant-field\"\n                );\n            } else {\n                element.classList.add(\"visual-builder__variant-field\");\n            }\n        } else if (\n            !dataCslp.startsWith(\"v2:\") &&\n            element.classList.contains(\"visual-builder__variant-field\")\n        ) {\n            element.classList.remove(\n                visualBuilderStyles()[\"visual-builder__variant-field\"],\n                \"visual-builder__variant-field\"\n            );\n            element.classList.add(\"visual-builder__base-field\");\n        } else if (\n            dataCslp.startsWith(\"v2:\") &&\n            variant &&\n            !dataCslp.includes(variant) &&\n            element.classList.contains(\"visual-builder__variant-field\")\n        ) {\n            element.classList.remove(\n                visualBuilderStyles()[\"visual-builder__variant-field\"],\n                \"visual-builder__variant-field\"\n            );\n            element.classList.add(\"visual-builder__disabled-variant-field\");\n        }\n        if (!observer) return;\n        // Disconnect this observer after processing\n        observer.disconnect();\n        const index = observers.indexOf(observer);\n        if (index > -1) {\n            observers.splice(index, 1);\n        }\n    };\n\n    const addElementClasses = (element: HTMLElement) => {\n        const dataCslp = element.getAttribute(DATA_CSLP_ATTR_SELECTOR);\n\n        if (!dataCslp) {\n            //recursive call for child nodes\n            element.childNodes.forEach((child) => {\n                if (child instanceof HTMLElement) {\n                    addElementClasses(child);\n                }\n            });\n            return;\n        }\n        //if element might have been updated by another observer\n        if (\n            dataCslp.startsWith(\"v2:\") &&\n            element.classList.contains(\"visual-builder__variant-field\")\n        ) {\n            return;\n        }\n        // if element has not given variant/base class\n        if (\n            dataCslp.startsWith(\"v2:\") &&\n            !element.classList.contains(\"visual-builder__variant-field\")\n        ) {\n            if (element.classList.contains(\"visual-builder__base-field\")) {\n                element.classList.remove(\"visual-builder__base-field\");\n            }\n            if (highlightVariantFields) {\n                element.classList.add(\n                    visualBuilderStyles()[\"visual-builder__variant-field\"],\n                    \"visual-builder__variant-field\"\n                );\n            } else {\n                element.classList.add(\"visual-builder__variant-field\");\n            }\n        } else if (!dataCslp.startsWith(\"v2:\")) {\n            if (element.classList.contains(\"visual-builder__variant-field\")) {\n                element.classList.remove(\n                    visualBuilderStyles()[\"visual-builder__variant-field\"],\n                    \"visual-builder__variant-field\"\n                );\n            }\n            element.classList.add(\"visual-builder__base-field\");\n        }\n\n        //recursive call for child nodes\n        element.childNodes.forEach((child) => {\n            if (child instanceof HTMLElement) {\n                addElementClasses(child);\n            }\n        });\n    };\n\n    // Create a separate observer for each element\n    const elementsWithCslp = document.querySelectorAll(\n        `[${DATA_CSLP_ATTR_SELECTOR}]`\n    );\n    elementsWithCslp.forEach((elementNode) => {\n        const element = elementNode as HTMLElement;\n        const observer = new MutationObserver((mutations) => {\n            mutations.forEach((mutation) => {\n                if (\n                    (mutation.type === \"attributes\" &&\n                        mutation.attributeName === DATA_CSLP_ATTR_SELECTOR) ||\n                    mutation.type === \"childList\"\n                ) {\n                    if (mutation.addedNodes.length > 0) {\n                        mutation.addedNodes.forEach((node) => {\n                            if (node instanceof HTMLElement) {\n                                addElementClasses(node);\n                            }\n                        });\n                    }\n                    const dataCslp = element.getAttribute(\n                        DATA_CSLP_ATTR_SELECTOR\n                    );\n                    updateElementClasses(element, dataCslp || \"\", observer);\n                }\n            });\n        });\n\n        observers.push(observer);\n        observer.observe(element, {\n            attributes: true,\n            childList: true, // Observe direct children\n            subtree: true,\n        });\n    });\n\n    setTimeout(() => {\n        if (observers.length > 0) {\n            observers.forEach((observer) => observer.disconnect());\n            observers.length = 0;\n        }\n    }, VARIANT_UPDATE_DELAY_MS);\n}\n"],"mappings":"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","names":[]}