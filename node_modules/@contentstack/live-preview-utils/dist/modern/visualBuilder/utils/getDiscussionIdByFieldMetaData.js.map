{"version":3,"sources":["../../../../src/visualBuilder/utils/getDiscussionIdByFieldMetaData.ts"],"sourcesContent":["import { CslpData } from \"../../cslp/types/cslp.types\";\nimport visualBuilderPostMessage from \"./visualBuilderPostMessage\";\nimport { ISchemaFieldMap } from \"./types/index.types\";\nimport { VisualBuilderPostMessageEvents } from \"./types/postMessage.types\";\nimport { IActiveDiscussion } from \"../components/CommentIcon\";\nimport { hasPostMessageError } from \"./errorHandling\";\n\n// Define an interface for the argument structure\ninterface GetDiscussionIdParams {\n    fieldMetadata: CslpData;\n    fieldSchema: ISchemaFieldMap;\n}\n\n/**\n * Retrieves the discussion data based on the field metadata and field UID.\n *\n * @param params The parameters including field metadata and field UID.\n * @returns A promise that resolves to the discussion data as a string.\n */\nexport async function getDiscussionIdByFieldMetaData(\n    params: GetDiscussionIdParams\n): Promise<IActiveDiscussion | null> {\n    const { fieldMetadata, fieldSchema } = params;\n\n    // Send a message to get the discussion Data\n    const discussion =\n        (await visualBuilderPostMessage?.send<IActiveDiscussion | null>(\n            VisualBuilderPostMessageEvents.GET_DISCUSSION_ID,\n            { fieldMetadata, fieldSchema }\n        )) ?? null;\n\n        if(hasPostMessageError(discussion)){\n            return null\n        }\n        \n    return discussion;\n}\n"],"mappings":";;;AACA,OAAO,8BAA8B;AAErC,SAAS,sCAAsC;AAE/C,SAAS,2BAA2B;AAcpC,eAAsB,+BAClB,QACiC;AACjC,QAAM,EAAE,eAAe,YAAY,IAAI;AAGvC,QAAM,aACD,MAAM,0BAA0B;AAAA,IAC7B,+BAA+B;AAAA,IAC/B,EAAE,eAAe,YAAY;AAAA,EACjC,KAAM;AAEN,MAAG,oBAAoB,UAAU,GAAE;AAC/B,WAAO;AAAA,EACX;AAEJ,SAAO;AACX;","names":[]}