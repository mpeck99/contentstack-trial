{"version":3,"sources":["../../../../src/livePreview/eventManager/postMessageEvent.hooks.ts"],"sourcesContent":["import Config, { setConfigFromParams } from \"../../configManager/configManager\";\nimport { ILivePreviewWindowType } from \"../../types/types\";\nimport { addParamsToUrl } from \"../../utils\";\nimport livePreviewPostMessage from \"./livePreviewEventManager\";\nimport { LIVE_PREVIEW_POST_MESSAGE_EVENTS } from \"./livePreviewEventManager.constant\";\nimport {\n    HistoryLivePreviewPostMessageEventData,\n    LivePreviewInitEventResponse,\n    OnChangeLivePreviewPostMessageEventData,\n} from \"./types/livePreviewPostMessageEvent.type\";\n\n/**\n * Registers a post message event listener for history-related events.\n * The listener handles events for forward, backward, and reload actions on the browser history.\n */\nexport function useHistoryPostMessageEvent(): void {\n    livePreviewPostMessage?.on<HistoryLivePreviewPostMessageEventData>(\n        LIVE_PREVIEW_POST_MESSAGE_EVENTS.HISTORY,\n        (event) => {\n            switch (event.data.type) {\n                case \"forward\": {\n                    window.history.forward();\n                    break;\n                }\n                case \"backward\": {\n                    window.history.back();\n                    break;\n                }\n                case \"reload\": {\n                    window.history.go();\n                    break;\n                }\n                default: {\n                    const exhaustiveCheck: never = event.data.type;\n                    throw new Error(`Unhandled event: ${exhaustiveCheck}`);\n                }\n            }\n        }\n    );\n}\n\n/**\n * Registers a post message event listener for updating the entry in the live preview.\n */\nexport function useOnEntryUpdatePostMessageEvent(): void {\n    livePreviewPostMessage?.on<OnChangeLivePreviewPostMessageEventData>(\n        LIVE_PREVIEW_POST_MESSAGE_EVENTS.ON_CHANGE,\n        (event) => {\n            setConfigFromParams({\n                live_preview: event.data.hash,\n            });\n            const { ssr, onChange } = Config.get();\n            if (!ssr) {\n                onChange();\n            }\n        }\n    );\n}\n\nexport function sendInitializeLivePreviewPostMessageEvent(): void {\n    livePreviewPostMessage\n        ?.send<LivePreviewInitEventResponse>(\n            LIVE_PREVIEW_POST_MESSAGE_EVENTS.INIT,\n            {\n                config: {\n                    shouldReload: Config.get().ssr,\n                    href: window.location.href,\n                    sdkVersion: process?.env?.PACKAGE_VERSION,\n                    mode: Config.get().mode,\n                },\n            }\n        )\n        .then((data) => {\n            const {\n                contentTypeUid,\n                entryUid,\n                windowType = ILivePreviewWindowType.PREVIEW,\n            } = data || {};\n\n            // TODO: This is a fix for the issue where we were calling sending init in the builder\n            // Let's remove this condition when we fix it.\n            if (Config?.get()?.windowType && Config.get().windowType === ILivePreviewWindowType.BUILDER) {\n                return;\n            }\n\n            if (contentTypeUid && entryUid) {\n                // TODO: we should not use this function. Instead we should have sideEffect run automatically when we set the config.\n                setConfigFromParams({\n                    content_type_uid: contentTypeUid,\n                    entry_uid: entryUid,\n                });\n            } else {\n                // TODO: add debug logs that runs conditionally\n                // PublicLogger.debug(\n                //     \"init message did not contain contentTypeUid or entryUid.\"\n                // );\n            }\n            if (Config.get().ssr) {\n                addParamsToUrl();\n            }\n            Config.set(\"windowType\", windowType);\n\n            // set timeout for client side (use to show warning: You are not editing this page)\n            if (!Config.get().ssr) {\n                setInterval(() => {\n                    sendCurrentPageUrlPostMessageEvent();\n                }, 1500);\n            }\n\n            useHistoryPostMessageEvent();\n            useOnEntryUpdatePostMessageEvent();\n        })\n        .catch((e) => {\n            // TODO: add debug logs that runs conditionally\n            // PublicLogger.debug(\"Error while sending init message\", e);\n        });\n}\n\nfunction sendCurrentPageUrlPostMessageEvent(): void {\n    livePreviewPostMessage\n        ?.send(LIVE_PREVIEW_POST_MESSAGE_EVENTS.CHECK_ENTRY_PAGE, {\n            href: window.location.href,\n        })\n        .catch(() => {\n            // TODO: add debug logs that runs conditionally\n        });\n}\n"],"mappings":";;;AAAA,OAAO,UAAU,2BAA2B;AAC5C,SAAS,8BAA8B;AACvC,SAAS,sBAAsB;AAC/B,OAAO,4BAA4B;AACnC,SAAS,wCAAwC;AAW1C,SAAS,6BAAmC;AAC/C,0BAAwB;AAAA,IACpB,iCAAiC;AAAA,IACjC,CAAC,UAAU;AACP,cAAQ,MAAM,KAAK,MAAM;AAAA,QACrB,KAAK,WAAW;AACZ,iBAAO,QAAQ,QAAQ;AACvB;AAAA,QACJ;AAAA,QACA,KAAK,YAAY;AACb,iBAAO,QAAQ,KAAK;AACpB;AAAA,QACJ;AAAA,QACA,KAAK,UAAU;AACX,iBAAO,QAAQ,GAAG;AAClB;AAAA,QACJ;AAAA,QACA,SAAS;AACL,gBAAM,kBAAyB,MAAM,KAAK;AAC1C,gBAAM,IAAI,MAAM,oBAAoB,eAAe,EAAE;AAAA,QACzD;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AACJ;AAKO,SAAS,mCAAyC;AACrD,0BAAwB;AAAA,IACpB,iCAAiC;AAAA,IACjC,CAAC,UAAU;AACP,0BAAoB;AAAA,QAChB,cAAc,MAAM,KAAK;AAAA,MAC7B,CAAC;AACD,YAAM,EAAE,KAAK,SAAS,IAAI,OAAO,IAAI;AACrC,UAAI,CAAC,KAAK;AACN,iBAAS;AAAA,MACb;AAAA,IACJ;AAAA,EACJ;AACJ;AAEO,SAAS,4CAAkD;AAC9D,0BACM;AAAA,IACE,iCAAiC;AAAA,IACjC;AAAA,MACI,QAAQ;AAAA,QACJ,cAAc,OAAO,IAAI,EAAE;AAAA,QAC3B,MAAM,OAAO,SAAS;AAAA,QACtB,YAAY;AAAA,QACZ,MAAM,OAAO,IAAI,EAAE;AAAA,MACvB;AAAA,IACJ;AAAA,EACJ,EACC,KAAK,CAAC,SAAS;AACZ,UAAM;AAAA,MACF;AAAA,MACA;AAAA,MACA,aAAa,uBAAuB;AAAA,IACxC,IAAI,QAAQ,CAAC;AAIb,QAAI,QAAQ,IAAI,GAAG,cAAc,OAAO,IAAI,EAAE,eAAe,uBAAuB,SAAS;AACzF;AAAA,IACJ;AAEA,QAAI,kBAAkB,UAAU;AAE5B,0BAAoB;AAAA,QAChB,kBAAkB;AAAA,QAClB,WAAW;AAAA,MACf,CAAC;AAAA,IACL,OAAO;AAAA,IAKP;AACA,QAAI,OAAO,IAAI,EAAE,KAAK;AAClB,qBAAe;AAAA,IACnB;AACA,WAAO,IAAI,cAAc,UAAU;AAGnC,QAAI,CAAC,OAAO,IAAI,EAAE,KAAK;AACnB,kBAAY,MAAM;AACd,2CAAmC;AAAA,MACvC,GAAG,IAAI;AAAA,IACX;AAEA,+BAA2B;AAC3B,qCAAiC;AAAA,EACrC,CAAC,EACA,MAAM,CAAC,MAAM;AAAA,EAGd,CAAC;AACT;AAEA,SAAS,qCAA2C;AAChD,0BACM,KAAK,iCAAiC,kBAAkB;AAAA,IACtD,MAAM,OAAO,SAAS;AAAA,EAC1B,CAAC,EACA,MAAM,MAAM;AAAA,EAEb,CAAC;AACT;","names":[]}