{"version":3,"sources":["../../../src/cslp/cslpdata.ts"],"sourcesContent":["import { isNil, isFinite, findLastIndex, findLast } from \"lodash-es\";\nimport {\n    CslpData,\n    CslpDataMultipleFieldMetadata,\n    CslpDataParentDetails,\n} from \"./types/cslp.types\";\nimport Config from \"../configManager/configManager\";\nimport { DeepSignal } from \"deepsignal\";\nimport { cslpTagStyles } from \"../livePreview/editButton/editButton.style\";\n\n/**\n * Extracts details from a CSLP value string.\n * @param cslpValue The CSLP value string to extract details from.\n * @returns An object containing the extracted details.\n */\nexport function extractDetailsFromCslp(cslpValue: string): CslpData {\n    let [cslpVersion, cslpData] = cslpValue.split(\":\");\n    // If the cslpVersion is greater than 2 letter which means it is v1 version of cslp data\n    if (cslpVersion.length > 2) {\n        cslpData = cslpVersion;\n        cslpVersion = \"v1\";\n    }\n\n    const [content_type_uid, entryInfo, locale, ...fieldPath] =\n        cslpData.split(\".\");\n\n    let entry_uid: string;\n    let variant;\n\n    switch (cslpVersion) {\n        case \"v2\": {\n            const [uid, variant_uid] = entryInfo.split(\"_\");\n            entry_uid = uid;\n            variant = variant_uid;\n            break;\n        }\n        default: {\n            entry_uid = entryInfo;\n            break;\n        }\n    }\n    const instancePathWithInstance = fieldPath.join(\".\");\n    const calculatedPath = fieldPath.filter((path) => {\n        const isEmpty = isNil(path);\n        const isNumber = isFinite(+path);\n        return (!isEmpty && !isNumber) || false;\n    });\n\n    const multipleFieldMetadata: CslpDataMultipleFieldMetadata =\n        getMultipleFieldMetadata(\n            content_type_uid,\n            entry_uid,\n            locale,\n            fieldPath\n        );\n\n    /**\n     * The index in the end of the field does not represent a field.\n     * It represents the index of the field in the multiple field.\n     * Hence, we pop it out.\n     */\n    if (isFinite(+fieldPath[fieldPath.length - 1])) {\n        fieldPath.pop();\n    }\n\n    return {\n        entry_uid,\n        content_type_uid,\n        variant,\n        locale,\n        cslpValue: cslpValue,\n        fieldPath: calculatedPath.join(\".\"),\n        fieldPathWithIndex: fieldPath.join(\".\"),\n        multipleFieldMetadata: multipleFieldMetadata,\n        instance: {\n            fieldPathWithIndex: instancePathWithInstance,\n        },\n    };\n}\n\n/**\n * Returns the parent path details of a given field path in CSLP format.\n * @param content_type_uid - The UID of the content type.\n * @param entry_uid - The UID of the entry.\n * @param locale - The locale of the entry.\n * @param fieldPath - The field path to get the parent path details for.\n * @returns The parent path details in CSLP format, or null if the field path does not have a parent.\n */\nfunction getParentPathDetails(\n    content_type_uid: string,\n    entry_uid: string,\n    locale: string,\n    fieldPath: string[]\n): CslpDataParentDetails | null {\n    const index = findLastIndex(fieldPath, (path) => isFinite(+path));\n    if (index === -1) return null;\n\n    const parentPath = fieldPath.slice(0, index);\n    return {\n        parentPath: parentPath.join(\".\"),\n        parentCslpValue: [\n            content_type_uid,\n            entry_uid,\n            locale,\n            ...parentPath,\n        ].join(\".\"),\n    };\n}\n\n/**\n * Returns metadata for a multiple field in a content entry.\n * @summary ONLY USE THESE RETURNED VALUES WHEN FIELD IS MULTIPLE\n * @summary IT GIVES WRONG DATA IF FIELD IS NOT MULTIPLE\n * @param content_type_uid - The UID of the content type.\n * @param entry_uid - The UID of the content entry.\n * @param locale - The locale of the content entry.\n * @param fieldPath - The path of the multiple field.\n * @returns The metadata for the multiple field.\n */\nfunction getMultipleFieldMetadata(\n    content_type_uid: string,\n    entry_uid: string,\n    locale: string,\n    fieldPath: string[]\n): CslpDataMultipleFieldMetadata {\n    const parentDetails = getParentPathDetails(\n        content_type_uid,\n        entry_uid,\n        locale,\n        fieldPath\n    );\n\n    const index = findLast(fieldPath, (path) => isFinite(+path));\n\n    return {\n        parentDetails: parentDetails,\n        index: isNil(index) ? -1 : +index,\n    };\n}\n\n//TODO: move this to editbutton\n/**\n * Adds an outline to the clicked element and triggers a callback function.\n * @param e - The MouseEvent object representing the click event.\n * @param callback - An optional callback function that will be called with the CSLP tag and highlighted element as arguments.\n */\nexport function addCslpOutline(\n    e: MouseEvent,\n    callback?: (args: {\n        cslpTag: string;\n        highlightedElement: HTMLElement;\n    }) => void\n): void {\n    const elements = Config.get().elements;\n\n    let trigger = true;\n    const eventTargets = e.composedPath();\n\n    for (const eventTarget of eventTargets) {\n        const element = eventTarget as HTMLElement;\n        if (element.nodeName === \"BODY\") break;\n        if (typeof element?.getAttribute !== \"function\") continue;\n\n        const cslpTag = element.getAttribute(\"data-cslp\");\n\n        if (trigger && cslpTag) {\n            if (elements.highlightedElement)\n                elements.highlightedElement.classList.remove(\n                    cslpTagStyles()[\"cslp-edit-mode\"]\n                );\n            element.classList.add(cslpTagStyles()[\"cslp-edit-mode\"]);\n\n            const updatedElements = elements;\n            updatedElements.highlightedElement =\n                element as DeepSignal<HTMLElement>;\n            Config.set(\"elements\", updatedElements);\n\n            callback?.({\n                cslpTag: cslpTag,\n                highlightedElement: element,\n            });\n\n            trigger = false;\n        } else if (!trigger) {\n            element.classList.remove(cslpTagStyles()[\"cslp-edit-mode\"]);\n        }\n    }\n}\n"],"mappings":"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","names":["Config"]}