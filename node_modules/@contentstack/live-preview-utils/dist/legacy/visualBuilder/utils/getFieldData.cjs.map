{"version":3,"sources":["../../../../src/visualBuilder/utils/getFieldData.ts"],"sourcesContent":["import { CslpData } from \"../../cslp/types/cslp.types\";\nimport visualBuilderPostMessage from \"./visualBuilderPostMessage\";\nimport { VisualBuilderPostMessageEvents } from \"./types/postMessage.types\";\nimport { hasPostMessageError } from \"./errorHandling\";\n\n/**\n * Retrieves the expected field data based on the provided field metadata.\n *\n * @param fieldMetadata The metadata of the field.\n * @param entryPath The path in the entry for which the value must be returned.\n * @returns A promise that resolves to the expected field data as a string.\n */\nexport async function getFieldData(\n    fieldMetadata: Pick<CslpData, \"content_type_uid\" | \"entry_uid\" | \"locale\">,\n    entryPath?: string\n): Promise<any> {\n    const data = await visualBuilderPostMessage?.send<{ fieldData: unknown }>(\n        VisualBuilderPostMessageEvents.GET_FIELD_DATA,\n        { fieldMetadata, entryPath: entryPath ?? \"\" }\n    );\n    \n    if(hasPostMessageError(data)){\n        return \"\";\n    }\n\n    // toString from lodash\n    // return toString(data?.fieldData);\n    return data?.fieldData;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,sCAAqC;AACrC,yBAA+C;AAC/C,2BAAoC;AASpC,eAAsB,aAClB,eACA,WACY;AAfhB;AAgBI,QAAM,OAAO,QAAM,qCAAAA,YAAA,mBAA0B;AAAA,IACzC,kDAA+B;AAAA,IAC/B,EAAE,eAAe,WAAW,aAAa,GAAG;AAAA;AAGhD,UAAG,0CAAoB,IAAI,GAAE;AACzB,WAAO;AAAA,EACX;AAIA,SAAO,6BAAM;AACjB;","names":["visualBuilderPostMessage"]}