{"version":3,"sources":["../../../../src/visualBuilder/utils/getPsuedoEditableStylesElement.ts"],"sourcesContent":["import getCamelCaseStyles from \"./getCamelCaseStyles\";\nimport getStyleOfAnElement from \"./getStyleOfAnElement\";\n\nexport function getPsuedoEditableElementStyles(\n    psuedoEditableElement: HTMLElement,\n    camelCase?: boolean\n): { [key: string]: string } {\n    let styles = getStyleOfAnElement(psuedoEditableElement);\n    if (camelCase) {\n        styles = getCamelCaseStyles(styles);\n    }\n    // Get the offsetTop and offsetLeft of the editable element and set the position of the pseudo editable element\n    // The pseudo editable element is positioned absolutely at the same location as the editable element\n    const rect = psuedoEditableElement.getBoundingClientRect();\n\n    styles.position = \"absolute\";\n    styles.top = `${rect.top + window.scrollY}px`;\n    styles.left = `${rect.left + window.scrollX}px`;\n    // setting height to auto so that the element can grow based on the content\n    // and the resize observer can detect the change in height\n    styles.height = \"auto\";\n    styles.whiteSpace = \"pre-line\";\n    styles.textTransform = \"none\";\n\n    return styles;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAA+B;AAC/B,iCAAgC;AAEzB,SAAS,+BACZ,uBACA,WACyB;AACzB,MAAI,aAAS,2BAAAA,SAAoB,qBAAqB;AACtD,MAAI,WAAW;AACX,iBAAS,0BAAAC,SAAmB,MAAM;AAAA,EACtC;AAGA,QAAM,OAAO,sBAAsB,sBAAsB;AAEzD,SAAO,WAAW;AAClB,SAAO,MAAM,GAAG,KAAK,MAAM,OAAO,OAAO;AACzC,SAAO,OAAO,GAAG,KAAK,OAAO,OAAO,OAAO;AAG3C,SAAO,SAAS;AAChB,SAAO,aAAa;AACpB,SAAO,gBAAgB;AAEvB,SAAO;AACX;","names":["getStyleOfAnElement","getCamelCaseStyles"]}