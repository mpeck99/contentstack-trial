{"version":3,"sources":["../../../../src/visualBuilder/generators/generateOverlay.tsx"],"sourcesContent":["import { extractDetailsFromCslp } from \"../../cslp/cslpdata\";\nimport { cleanIndividualFieldResidual } from \"../utils/handleIndividualFields\";\nimport visualBuilderPostMessage from \"../utils/visualBuilderPostMessage\";\nimport { VisualBuilderPostMessageEvents } from \"../utils/types/postMessage.types\";\n\nimport { VisualBuilder } from \"..\";\nimport EventListenerHandlerParams from \"../listeners/types\";\nimport { FieldSchemaMap } from \"../utils/fieldSchemaMap\";\nimport { FieldDataType } from \"../utils/types/index.types\";\nimport { getFieldType } from \"../utils/getFieldType\";\nimport { CslpData } from \"../../cslp/types/cslp.types\";\nimport { getMultilinePlaintext } from \"../utils/getMultilinePlaintext\";\nimport { showAllHiddenHighlightedCommentIcons } from \"./generateHighlightedComment\";\n\n/**\n * Adds a focus overlay to the target element.\n * @param targetElement - The element to add the focus overlay to.\n * @param focusOverlayWrapper - The HTMLDivElement that contains the focus overlay.\n * @returns void\n */\nexport function addFocusOverlay(\n    targetElement: Element,\n    focusOverlayWrapper: HTMLDivElement,\n    disabled?: boolean\n): void {\n    const targetElementDimension = targetElement.getBoundingClientRect();\n    if (\n        targetElementDimension.width === 0 ||\n        targetElementDimension.height === 0\n    )\n        return;\n    focusOverlayWrapper.classList.add(\"visible\");\n\n    const distanceFromTop = targetElementDimension.top + window.scrollY;\n    const topOverlayDOM = focusOverlayWrapper.querySelector<HTMLDivElement>(\n        \".visual-builder__overlay--top\"\n    );\n\n    if (topOverlayDOM) {\n        topOverlayDOM.style.top = \"0\";\n        topOverlayDOM.style.left = \"0\";\n        topOverlayDOM.style.width = \"100%\";\n        topOverlayDOM.style.height = `calc(${distanceFromTop}px)`;\n    }\n\n    const bottomOverlayDOM = focusOverlayWrapper.querySelector<HTMLDivElement>(\n        \".visual-builder__overlay--bottom\"\n    );\n    if (bottomOverlayDOM) {\n        bottomOverlayDOM.style.top = `${\n            targetElementDimension.bottom + window.scrollY\n        }px`;\n        bottomOverlayDOM.style.height = `${\n            window.document.body.scrollHeight -\n            targetElementDimension.bottom -\n            window.scrollY\n        }px`;\n        bottomOverlayDOM.style.left = \"0\";\n        bottomOverlayDOM.style.width = \"100%\";\n    }\n\n    const leftOverlayDOM = focusOverlayWrapper.querySelector<HTMLDivElement>(\n        \".visual-builder__overlay--left\"\n    );\n    if (leftOverlayDOM) {\n        leftOverlayDOM.style.left = \"0\";\n        leftOverlayDOM.style.top = `${distanceFromTop}px`;\n        leftOverlayDOM.style.height = `${targetElementDimension.height}px`;\n        leftOverlayDOM.style.width = `${targetElementDimension.left}px`;\n    }\n\n    const rightOverlayDOM = focusOverlayWrapper.querySelector<HTMLDivElement>(\n        \".visual-builder__overlay--right\"\n    );\n    if (rightOverlayDOM) {\n        rightOverlayDOM.style.left = `${targetElementDimension.right}px`;\n        rightOverlayDOM.style.top = `${distanceFromTop}px`;\n        rightOverlayDOM.style.height = `${targetElementDimension.height}px`;\n        rightOverlayDOM.style.width = `${\n            document.documentElement.clientWidth - targetElementDimension.right\n        }px`;\n    }\n\n    const outlineDOM = focusOverlayWrapper.querySelector<HTMLDivElement>(\n        \".visual-builder__overlay--outline\"\n    );\n    if (outlineDOM) {\n        outlineDOM.style.top = `${\n            targetElementDimension.top + window.scrollY\n        }px`;\n        outlineDOM.style.height = `${targetElementDimension.height}px`;\n        outlineDOM.style.width = `${targetElementDimension.width}px`;\n        outlineDOM.style.left = `${targetElementDimension.left}px`;\n        outlineDOM.style.outlineColor = disabled ? \"#909090\" : \"#715cdd\";\n    }\n}\n\n/**\n * Hides the focus overlay and performs necessary cleanup actions when the user clicks outside of the focused element.\n * @param event - The mouse event that triggered the function.\n * @param elements - An object containing references to the focus overlay wrapper, the previously selected editable DOM element, and the visual builder wrapper.\n */\nexport function hideFocusOverlay(elements: HideOverlayParams): void {\n    const {\n        visualBuilderContainer,\n        visualBuilderOverlayWrapper,\n        focusedToolbar,\n        resizeObserver,\n        noTrigger,\n    } = elements;\n\n    if (visualBuilderOverlayWrapper) {\n        visualBuilderOverlayWrapper.classList.remove(\"visible\");\n\n        // Cleanup overlay styles: Top, Right, Bottom, Left & Outline\n        visualBuilderOverlayWrapper.childNodes.forEach((childNode) => {\n            if (childNode instanceof Element) {\n                childNode.removeAttribute(\"style\");\n            }\n        });\n\n        if (!noTrigger) {\n            sendFieldEvent({\n                visualBuilderContainer,\n                eventType: VisualBuilderPostMessageEvents.UPDATE_FIELD,\n            });\n        } else {\n            const { previousSelectedEditableDOM, focusFieldValue } =\n                VisualBuilder.VisualBuilderGlobalState.value || {};\n            if (\n                previousSelectedEditableDOM &&\n                \"innerText\" in previousSelectedEditableDOM &&\n                focusFieldValue != null\n            ) {\n                previousSelectedEditableDOM.innerText = focusFieldValue;\n            }\n        }\n        VisualBuilder.VisualBuilderGlobalState.value.focusFieldValue = null;\n        cleanIndividualFieldResidual({\n            overlayWrapper: visualBuilderOverlayWrapper,\n            visualBuilderContainer: visualBuilderContainer,\n            focusedToolbar: focusedToolbar,\n            resizeObserver: resizeObserver,\n        });\n    }\n}\ninterface ISendFieldEventParams {\n    visualBuilderContainer: HTMLElement | null;\n    eventType:\n        | VisualBuilderPostMessageEvents.UPDATE_FIELD\n        | VisualBuilderPostMessageEvents.SYNC_FIELD;\n}\nexport function sendFieldEvent(options: ISendFieldEventParams): void {\n    const { visualBuilderContainer, eventType } = options;\n    const previousSelectedEditableDOM =\n        VisualBuilder.VisualBuilderGlobalState.value\n            .previousSelectedEditableDOM;\n    const pseudoEditableElement = visualBuilderContainer?.querySelector(\n        \"div.visual-builder__pseudo-editable-element\"\n    );\n    if (\n        previousSelectedEditableDOM &&\n        (previousSelectedEditableDOM.hasAttribute(\"contenteditable\") ||\n            pseudoEditableElement)\n    ) {\n        const actualEditedElement =\n            pseudoEditableElement ||\n            (previousSelectedEditableDOM as HTMLElement);\n\n        let data =\n            \"innerText\" in actualEditedElement\n                ? actualEditedElement.innerText\n                : actualEditedElement.textContent;\n\n        const fieldMetadata = extractDetailsFromCslp(\n            previousSelectedEditableDOM.getAttribute(\"data-cslp\") as string\n        );\n\n        FieldSchemaMap.getFieldSchema(\n            fieldMetadata.content_type_uid,\n            fieldMetadata.fieldPath\n        )\n            .then((fieldSchema) => {\n                if (\n                    fieldSchema &&\n                    eventType === VisualBuilderPostMessageEvents.UPDATE_FIELD\n                ) {\n                    const fieldType = getFieldType(fieldSchema);\n                    if (fieldType && fieldType === FieldDataType.MULTILINE) {\n                        data = getMultilinePlaintext(actualEditedElement);\n                        (actualEditedElement as HTMLElement).innerText =\n                            data as string;\n                    }\n                }\n            })\n            .finally(() => {\n                visualBuilderPostMessage?.send(eventType, {\n                    data,\n                    fieldMetadata,\n                });\n            });\n    }\n}\ninterface HideOverlayParams\n    extends Pick<\n        EventListenerHandlerParams,\n        \"visualBuilderContainer\" | \"focusedToolbar\" | \"resizeObserver\"\n    > {\n    visualBuilderOverlayWrapper: HTMLDivElement | null;\n    noTrigger?: boolean;\n}\n\nexport function hideOverlay(params: HideOverlayParams): void {\n    const focusElementObserver =\n        VisualBuilder.VisualBuilderGlobalState.value.focusElementObserver;\n    if (focusElementObserver) {\n        focusElementObserver.disconnect();\n        VisualBuilder.VisualBuilderGlobalState.value.focusElementObserver =\n            null;\n    }\n    hideFocusOverlay({\n        visualBuilderContainer: params.visualBuilderContainer,\n        visualBuilderOverlayWrapper: params.visualBuilderOverlayWrapper,\n        focusedToolbar: params.focusedToolbar,\n        resizeObserver: params.resizeObserver,\n        noTrigger: Boolean(params.noTrigger),\n    });\n    showAllHiddenHighlightedCommentIcons();\n    if (\n        !VisualBuilder.VisualBuilderGlobalState.value\n            .previousSelectedEditableDOM\n    )\n        return;\n    params.resizeObserver.unobserve(\n        VisualBuilder.VisualBuilderGlobalState.value.previousSelectedEditableDOM\n    );\n    VisualBuilder.VisualBuilderGlobalState.value.previousSelectedEditableDOM =\n        null;\n}\n"],"mappings":"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","names":["visualBuilderPostMessage"]}