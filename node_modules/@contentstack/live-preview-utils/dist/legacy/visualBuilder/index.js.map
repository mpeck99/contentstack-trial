{"version":3,"sources":["../../../src/visualBuilder/index.ts"],"sourcesContent":["import { Signal, signal } from \"@preact/signals\";\n\nimport { inIframe } from \"../common/inIframe\";\nimport Config from \"../configManager/configManager\";\nimport {\n    useHistoryPostMessageEvent,\n    useOnEntryUpdatePostMessageEvent,\n} from \"../livePreview/eventManager/postMessageEvent.hooks\";\nimport {\n    ILivePreviewModeConfig,\n    ILivePreviewWindowType,\n    IVisualBuilderInitEvent,\n} from \"../types/types\";\nimport { generateStartEditingButton } from \"./generators/generateStartEditingButton\";\n\nimport { addFocusOverlay } from \"./generators/generateOverlay\";\nimport { getEntryIdentifiersInCurrentPage } from \"./utils/getEntryIdentifiersInCurrentPage\";\nimport visualBuilderPostMessage from \"./utils/visualBuilderPostMessage\";\nimport { VisualBuilderPostMessageEvents } from \"./utils/types/postMessage.types\";\n\nimport { setup } from \"goober\";\nimport { debounce, isEqual } from \"lodash-es\";\nimport { h } from \"preact\";\nimport { extractDetailsFromCslp } from \"../cslp\";\nimport initUI from \"./components\";\nimport { useDraftFieldsPostMessageEvent } from \"./eventManager/useDraftFieldsPostMessageEvent\";\nimport { useHideFocusOverlayPostMessageEvent } from \"./eventManager/useHideFocusOverlayPostMessageEvent\";\nimport { useScrollToField } from \"./eventManager/useScrollToField\";\nimport { useVariantFieldsPostMessageEvent } from \"./eventManager/useVariantsPostMessageEvent\";\nimport {\n    generateEmptyBlocks,\n    removeEmptyBlocks,\n} from \"./generators/generateEmptyBlock\";\nimport { addEventListeners, removeEventListeners } from \"./listeners\";\nimport { addKeyboardShortcuts } from \"./listeners/keyboardShortcuts\";\nimport { FieldSchemaMap } from \"./utils/fieldSchemaMap\";\nimport { isFieldDisabled } from \"./utils/isFieldDisabled\";\nimport {\n    updateFocussedState,\n    updateFocussedStateOnMutation,\n} from \"./utils/updateFocussedState\";\nimport { useHighlightCommentIcon } from \"./eventManager/useHighlightCommentIcon\";\nimport { updateHighlightedCommentIconPosition } from \"./generators/generateHighlightedComment\";\nimport { useRecalculateVariantDataCSLPValues } from \"./eventManager/useRecalculateVariantDataCSLPValues\";\nimport { VB_EmptyBlockParentClass } from \"..\";\n\ninterface VisualBuilderGlobalStateImpl {\n    previousSelectedEditableDOM: HTMLElement | Element | null;\n    previousHoveredTargetDOM: Element | null;\n    previousEmptyBlockParents: Element[] | [];\n    focusFieldValue: string | null;\n    audienceMode: boolean;\n    locale: string;\n    variant: string | null;\n    focusElementObserver: MutationObserver | null;\n}\n\nexport class VisualBuilder {\n    private customCursor: HTMLDivElement | null = null;\n    private overlayWrapper: HTMLDivElement | null = null;\n    private visualBuilderContainer: HTMLDivElement | null = null;\n    private focusedToolbar: HTMLDivElement | null = null;\n\n    static VisualBuilderGlobalState: Signal<VisualBuilderGlobalStateImpl> =\n        signal({\n            previousSelectedEditableDOM: null,\n            previousHoveredTargetDOM: null,\n            previousEmptyBlockParents: [],\n            focusFieldValue: null,\n            audienceMode: false,\n            locale: Config.get().stackDetails.masterLocale || \"en-us\",\n            variant: null,\n            focusElementObserver: null,\n        });\n\n    private handlePositionChange(editableElement: HTMLElement) {\n        updateFocussedState({\n            editableElement,\n            visualBuilderContainer: this.visualBuilderContainer,\n            overlayWrapper: this.overlayWrapper,\n            focusedToolbar: this.focusedToolbar,\n            resizeObserver: this.resizeObserver,\n        });\n    }\n\n    private scrollEventHandler = () => {\n        updateHighlightedCommentIconPosition(); // Update icons position\n    };\n\n    private resizeEventHandler = () => {\n        const previousSelectedEditableDOM =\n            VisualBuilder.VisualBuilderGlobalState.value\n                .previousSelectedEditableDOM;\n        updateHighlightedCommentIconPosition();\n        if (previousSelectedEditableDOM) {\n            this.handlePositionChange(\n                previousSelectedEditableDOM as HTMLElement\n            );\n        }\n    };\n\n    private resizeObserver = new ResizeObserver(([entry]) => {\n        const previousSelectedEditableDOM =\n            VisualBuilder.VisualBuilderGlobalState.value\n                .previousSelectedEditableDOM;\n\n        if (!this.overlayWrapper || !previousSelectedEditableDOM) {\n            return;\n        }\n\n        // if previous selected editable element is not same as the current\n        // target and the target is also not psuedo-editable then return\n        if (\n            !entry.target.isSameNode(previousSelectedEditableDOM) &&\n            !entry.target.classList.contains(\n                \"visual-builder__pseudo-editable-element\"\n            )\n        ) {\n            return;\n        }\n\n        const isPsuedoEditableElement = entry.target.classList.contains(\n            \"visual-builder__pseudo-editable-element\"\n        );\n\n        // the \"actual\" editable element when the current target is psuedo-editable\n        // is the previous selected editable element instead of the closest data-cslp element\n        // (cant use closest because the psuedo editable is absolute positioned)\n        // (Note - why do we even need the closest? we do an early exit if entry.target\n        // is not the previous selected editable element, needs more investigation)\n        const editableElement = (\n            isPsuedoEditableElement\n                ? previousSelectedEditableDOM\n                : entry.target.closest(\"[data-cslp]\")\n        ) as HTMLElement | null;\n\n        if (isPsuedoEditableElement) {\n            // if the current target is psuedo-editable, then the resizing occurred by typing\n            // into the psuedo editable, simply update the focus overlay\n            addFocusOverlay(entry.target, this.overlayWrapper);\n\n            // TODO check if we can now resize the actual editable element\n            // when psuedo editable element is resized, avoid infinite loops\n        } else if (editableElement) {\n            this.handlePositionChange(editableElement);\n        }\n\n        // update the overlay if field is disabled\n        const cslpData =\n            editableElement && editableElement.getAttribute(\"data-cslp\");\n\n        if (!editableElement || !cslpData) {\n            return;\n        }\n\n        const fieldMetadata = extractDetailsFromCslp(cslpData);\n\n        FieldSchemaMap.getFieldSchema(\n            fieldMetadata.content_type_uid,\n            fieldMetadata.fieldPath\n        ).then((fieldSchema) => {\n            if (!fieldSchema) {\n                return;\n            }\n            const { isDisabled } = isFieldDisabled(fieldSchema, {\n                editableElement,\n                fieldMetadata,\n            });\n            if (isDisabled) {\n                addFocusOverlay(\n                    editableElement,\n                    this.overlayWrapper as HTMLDivElement,\n                    isDisabled\n                );\n            }\n        });\n    });\n\n    private mutationObserver = new MutationObserver(\n        debounce(\n            async () => {\n                updateFocussedStateOnMutation(\n                    this.overlayWrapper,\n                    this.focusedToolbar,\n                    this.visualBuilderContainer,\n                    this.resizeObserver\n                );\n                const emptyBlockParents = Array.from(\n                    document.querySelectorAll(\n                        `.${VB_EmptyBlockParentClass}`\n                    )\n                );\n\n                const previousEmptyBlockParents = VisualBuilder\n                    .VisualBuilderGlobalState.value\n                    .previousEmptyBlockParents as Element[];\n\n                if (!isEqual(emptyBlockParents, previousEmptyBlockParents)) {\n                    const noMoreEmptyBlockParent =\n                        previousEmptyBlockParents.filter(\n                            (x) => !emptyBlockParents.includes(x)\n                        );\n                    const newEmptyBlockParent = emptyBlockParents.filter(\n                        (x) => !previousEmptyBlockParents.includes(x)\n                    );\n\n                    removeEmptyBlocks(noMoreEmptyBlockParent);\n                    await generateEmptyBlocks(newEmptyBlockParent);\n\n                    VisualBuilder.VisualBuilderGlobalState.value = {\n                        ...VisualBuilder.VisualBuilderGlobalState.value,\n                        previousEmptyBlockParents: emptyBlockParents,\n                    };\n                }\n            },\n            100,\n            { trailing: true }\n        )\n    );\n\n    constructor() {\n        // Handles changes in element positions due to sidebar toggling or window resizing,\n        // triggering a redraw of the visual builder\n        window.addEventListener(\"resize\", this.resizeEventHandler);\n        window.addEventListener(\"scroll\", this.scrollEventHandler);\n        initUI({\n            resizeObserver: this.resizeObserver,\n        });\n\n        // Initializing goober for css-in-js\n        setup(h);\n\n        this.visualBuilderContainer = document.querySelector(\n            \".visual-builder__container\"\n        );\n        this.overlayWrapper = document.querySelector(\n            \".visual-builder__overlay__wrapper\"\n        );\n        this.customCursor = document.querySelector(\".visual-builder__cursor\");\n        this.focusedToolbar = document.querySelector(\n            \".visual-builder__focused-toolbar\"\n        );\n\n        const config = Config.get();\n\n        if (!config.enable || config.mode < ILivePreviewModeConfig.BUILDER) {\n            return;\n        }\n        visualBuilderPostMessage\n            ?.send<IVisualBuilderInitEvent>(\"init\", {\n                isSSR: config.ssr,\n                href: window.location.href,\n            })\n            .then((data) => {\n                const {\n                    windowType = ILivePreviewWindowType.BUILDER,\n                    stackDetails,\n                } = data || {};\n                Config.set(\"windowType\", windowType);\n                Config.set(\n                    \"stackDetails.masterLocale\",\n                    stackDetails?.masterLocale || \"en-us\"\n                );\n\n                addEventListeners({\n                    overlayWrapper: this.overlayWrapper,\n                    visualBuilderContainer: this.visualBuilderContainer,\n                    previousSelectedEditableDOM:\n                        VisualBuilder.VisualBuilderGlobalState.value\n                            .previousSelectedEditableDOM,\n                    focusedToolbar: this.focusedToolbar,\n                    resizeObserver: this.resizeObserver,\n                    customCursor: this.customCursor,\n                });\n\n                addKeyboardShortcuts({\n                    overlayWrapper: this.overlayWrapper,\n                    visualBuilderContainer: this.visualBuilderContainer,\n                    focusedToolbar: this.focusedToolbar,\n                    resizeObserver: this.resizeObserver,\n                });\n                useScrollToField();\n                useHighlightCommentIcon();\n                this.mutationObserver.observe(document.body, {\n                    childList: true,\n                    subtree: true,\n                });\n\n                visualBuilderPostMessage?.on(\n                    VisualBuilderPostMessageEvents.GET_ALL_ENTRIES_IN_CURRENT_PAGE,\n                    getEntryIdentifiersInCurrentPage\n                );\n                visualBuilderPostMessage?.send(\n                    VisualBuilderPostMessageEvents.SEND_VARIANT_AND_LOCALE\n                );\n\n                useHideFocusOverlayPostMessageEvent({\n                    overlayWrapper: this.overlayWrapper,\n                    visualBuilderContainer: this.visualBuilderContainer,\n                    focusedToolbar: this.focusedToolbar,\n                    resizeObserver: this.resizeObserver,\n                });\n\n                // These events are used to sync the data when we made some changes in the entry without invoking live preview module.\n                useHistoryPostMessageEvent();\n                useOnEntryUpdatePostMessageEvent();\n                useRecalculateVariantDataCSLPValues();\n                useDraftFieldsPostMessageEvent();\n                useVariantFieldsPostMessageEvent();\n            })\n            .catch(() => {\n                if (!inIframe()) {\n                    generateStartEditingButton(this.visualBuilderContainer);\n                }\n            });\n    }\n\n    // TODO: write test cases\n    destroy = (): void => {\n        // Remove event listeners\n        window.removeEventListener(\"resize\", this.resizeEventHandler);\n        window.removeEventListener(\"scroll\", this.scrollEventHandler);\n\n        // Remove custom event listeners\n        removeEventListeners({\n            overlayWrapper: this.overlayWrapper,\n            visualBuilderContainer: this.visualBuilderContainer,\n            previousSelectedEditableDOM:\n                VisualBuilder.VisualBuilderGlobalState.value\n                    .previousSelectedEditableDOM,\n            focusedToolbar: this.focusedToolbar,\n            resizeObserver: this.resizeObserver,\n            customCursor: this.customCursor,\n        });\n\n        // Disconnect observers\n        this.resizeObserver.disconnect();\n        this.mutationObserver.disconnect();\n\n        // Clear global state\n        VisualBuilder.VisualBuilderGlobalState.value = {\n            previousSelectedEditableDOM: null,\n            previousHoveredTargetDOM: null,\n            previousEmptyBlockParents: [],\n            focusFieldValue: null,\n            audienceMode: false,\n            locale: \"en-us\",\n            variant: null,\n            focusElementObserver: null,\n        };\n\n        // Remove DOM elements\n        if (this.visualBuilderContainer) {\n            window.document.body.removeChild(this.visualBuilderContainer);\n        }\n        if (this.customCursor) {\n            this.customCursor.remove();\n        }\n        if (this.overlayWrapper) {\n            this.overlayWrapper.remove();\n        }\n        if (this.focusedToolbar) {\n            this.focusedToolbar.remove();\n        }\n\n        // Nullify references\n        this.customCursor = null;\n        this.overlayWrapper = null;\n        this.visualBuilderContainer = null;\n        this.focusedToolbar = null;\n    };\n}\n"],"mappings":"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","names":["_a"]}