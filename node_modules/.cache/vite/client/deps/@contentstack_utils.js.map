{
  "version": 3,
  "sources": ["../../../../@contentstack/utils/src/nodes/mark-type.ts", "../../../../@contentstack/utils/src/nodes/node-type.ts", "../../../../@contentstack/utils/src/helper/sanitize.ts", "../../../../@contentstack/utils/src/options/default-node-options.ts", "../../../../@contentstack/utils/src/embedded-types/style-type.ts", "../../../../@contentstack/utils/src/options/default-options.ts", "../../../../@contentstack/utils/src/helper/find-embeded-object.ts", "../../../../@contentstack/utils/src/helper/enumerate-entries.ts", "../../../../@contentstack/utils/src/Models/metadata-model.ts", "../../../../@contentstack/utils/src/helper/html-to-json.ts", "../../../../@contentstack/utils/src/extensions/index.ts", "../../../../@contentstack/utils/src/helper/find-render-content.ts", "../../../../@contentstack/utils/src/render-embedded-objects.ts", "../../../../@contentstack/utils/src/nodes/node.ts", "../../../../@contentstack/utils/src/nodes/document.ts", "../../../../@contentstack/utils/src/nodes/text-node.ts", "../../../../@contentstack/utils/src/json-to-html.ts", "../../../../@contentstack/utils/src/gql.ts", "../../../../@contentstack/utils/src/entry-editable.ts", "../../../../@contentstack/utils/src/updateAssetURLForGQL.ts"],
  "sourcesContent": ["enum MarkType {\n    BOLD = 'bold',\n    ITALIC = 'italic',\n    UNDERLINE = 'underline',\n    CLASSNAME_OR_ID = 'classnameOrId',\n\n    STRIKE_THROUGH = 'strikethrough',\n    INLINE_CODE = 'inlineCode',\n\n\n    SUBSCRIPT = 'subscript',\n    SUPERSCRIPT = 'superscript',\n    BREAK = 'break'\n}\n\nexport default MarkType", "enum NodeType {\n    DOCUMENT = 'doc',\n    PARAGRAPH = 'p',\n    \n    LINK = 'a',\n    IMAGE = 'img',\n    EMBED = 'embed',\n\n    HEADING_1 = 'h1',\n    HEADING_2 = 'h2',\n    HEADING_3 = 'h3',\n    HEADING_4 = 'h4',\n    HEADING_5 = 'h5',\n    HEADING_6 = 'h6',\n  \n    ORDER_LIST = 'ol',\n    UNORDER_LIST = 'ul',\n    LIST_ITEM = 'li',\n    FRAGMENT = 'fragment',\n  \n    HR = 'hr',\n\n    TABLE = 'table',\n    TABLE_HEADER = 'thead',\n    TABLE_BODY = 'tbody',\n    TABLE_FOOTER = 'tfoot',\n    TABLE_ROW = 'tr',\n    TABLE_HEAD = 'th',\n    TABLE_DATA = 'td',\n    COL_GROUP = 'colgroup',\n    COL = 'col',\n\n    BLOCK_QUOTE = 'blockquote',\n    CODE = 'code',\n\n    TEXT = 'text',\n    REFERENCE = 'reference'\n}\n\nexport default NodeType;", "\ntype AllowedTags = 'p' | 'a' | 'strong' | 'em' | 'ul' | 'ol' | 'li' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'sub' | 'u' | 'table' | 'thead' | 'tbody' | 'tr' | 'th' | 'td' | 'span' | 'fragment' | 'strike' | 'sup' | 'br'| 'img' | 'colgroup' | 'col' | 'div';\ntype AllowedAttributes = 'href' | 'title' | 'target' | 'alt' | 'src' | 'class' | 'id' | 'style' | 'colspan' | 'rowspan' | 'content-type-uid' | 'data-sys-asset-uid' | 'sys-style-type' | 'data-type' | 'data-width' | 'data-rows' | 'data-cols' | 'data-mtec';\n\nexport function sanitizeHTML(input: string, allowedTags: AllowedTags[] = ['p', 'a', 'strong', 'em', 'ul', 'ol', 'li', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'sub', 'u', 'table', 'thead', 'tbody', 'tr', 'th', 'td', 'span', 'fragment', 'sup', 'strike', 'br', 'img', 'colgroup', 'col', 'div'], allowedAttributes: AllowedAttributes[] = ['href', 'title', 'target', 'alt', 'src', 'class', 'id', 'style', 'colspan', 'rowspan', 'content-type-uid', 'data-sys-asset-uid', 'sys-style-type', 'data-type', 'data-width', 'data-rows', 'data-cols', 'data-mtec']): string {\n    \n    // Replace newline characters with <br /> before processing the HTML tags\n    input = input.replace(/\\n/g, '<br />');\n\n    // Regular expression to find and remove all HTML tags except the allowed ones\n    const sanitized = input.replace(/<\\/?([a-z][a-z0-9]*)\\b[^<>]*>/gi, (match, tag) => {\n        return allowedTags.includes(tag.toLowerCase()) ? match : '';\n    });\n\n    // Regular expression to remove all attributes except the allowed ones\n    const cleaned = sanitized.replace(/<([a-z][a-z0-9]*)\\b[^<>]*>/gi, (match, tag) => {\n        if (!allowedTags.includes(tag.toLowerCase())) {\n            return match; // Ignore tags not in allowedTags\n        }\n        // For each tag that is allowed, clean its attributes\n        return match.replace(/\\s([a-z\\-]+)=['\"][^'\"]*['\"]/gi, (attributeMatch, attribute) => {\n            return allowedAttributes.includes(attribute.toLowerCase()) ? attributeMatch : '';\n        });\n    });\n    return cleaned;\n}", "import { Next, RenderOption } from \".\";\nimport MarkType from \"../nodes/mark-type\";\nimport Node from \"../nodes/node\";\nimport NodeType from \"../nodes/node-type\";\nimport { sanitizeHTML } from \"../helper/sanitize\";\n\nexport const defaultNodeOption: RenderOption = {\n    [NodeType.DOCUMENT]:(node: Node) => {\n        return ``\n    },\n    [NodeType.PARAGRAPH]:(node: Node, next: Next) => {\n        return `<p${node.attrs.style ? ` style=\"${node.attrs.style}\"` : ``}${node.attrs['class-name'] ? ` class=\"${node.attrs['class-name']}\"` : ``}${node.attrs.id ? ` id=\"${node.attrs.id}\"` : ``}>${sanitizeHTML(next(node.children))}</p>`\n    },\n    [NodeType.LINK]:(node: Node, next: Next) => {\n        const sanitizedHref = sanitizeHTML(node.attrs.href || node.attrs.url);\n        if (node.attrs.target) {\n            return `<a${node.attrs.style ? ` style=\"${node.attrs.style}\"` : ``}${node.attrs['class-name'] ? ` class=\"${node.attrs['class-name']}\"` : ``}${node.attrs.id ? ` id=\"${node.attrs.id}\"` : ``} href=\"${sanitizedHref}\" target=\"${node.attrs.target}\">${sanitizeHTML(next(node.children))}</a>`\n        }\n        return `<a${node.attrs.style ? ` style=\"${node.attrs.style}\"` : ``}${node.attrs['class-name'] ? ` class=\"${node.attrs['class-name']}\"` : ``}${node.attrs.id ? ` id=\"${node.attrs.id}\"` : ``} href=\"${sanitizedHref}\">${sanitizeHTML(next(node.children))}</a>`\n    },\n    [NodeType.IMAGE]:(node: Node, next: Next) => {\n        const sanitizedSrc = encodeURI(sanitizeHTML(node.attrs.src || node.attrs.url));\n        return `<img${node.attrs.style ? ` style=\"${node.attrs.style}\"` : ``}${node.attrs['class-name'] ? ` class=\"${node.attrs['class-name']}\"` : ``}${node.attrs.id ? ` id=\"${node.attrs.id}\"` : ``} src=\"${sanitizedSrc}\" />${sanitizeHTML(next(node.children))}`\n    },\n    [NodeType.EMBED]:(node: Node, next: Next) => {\n        const sanitizedSrc = encodeURI(sanitizeHTML(node.attrs.src || node.attrs.url));\n        return `<iframe${node.attrs.style ? ` style=\"${node.attrs.style}\"` : ``}${node.attrs['class-name'] ? ` class=\"${node.attrs['class-name']}\"` : ``}${node.attrs.id ? ` id=\"${node.attrs.id}\"` : ``} src=\"${sanitizedSrc}\">${sanitizeHTML(next(node.children))}</iframe>`\n    },\n    [NodeType.HEADING_1]:(node: Node, next: Next) => {\n        return `<h1${node.attrs.style ? ` style=\"${node.attrs.style}\"` : ``}${node.attrs['class-name'] ? ` class=\"${node.attrs['class-name']}\"` : ``}${node.attrs.id ? ` id=\"${node.attrs.id}\"` : ``}>${sanitizeHTML(next(node.children))}</h1>`\n    },\n    [NodeType.HEADING_2]:(node: Node, next: Next) => {\n        return `<h2${node.attrs.style ? ` style=\"${node.attrs.style}\"` : ``}${node.attrs['class-name'] ? ` class=\"${node.attrs['class-name']}\"` : ``}${node.attrs.id ? ` id=\"${node.attrs.id}\"` : ``}>${sanitizeHTML(next(node.children))}</h2>`\n    },\n    [NodeType.HEADING_3]:(node: Node, next: Next) => {\n        return `<h3${node.attrs.style ? ` style=\"${node.attrs.style}\"` : ``}${node.attrs['class-name'] ? ` class=\"${node.attrs['class-name']}\"` : ``}${node.attrs.id ? ` id=\"${node.attrs.id}\"` : ``}>${sanitizeHTML(next(node.children))}</h3>`\n    },\n    [NodeType.HEADING_4]:(node: Node, next: Next) => {\n        return `<h4${node.attrs.style ? ` style=\"${node.attrs.style}\"` : ``}${node.attrs['class-name'] ? ` class=\"${node.attrs['class-name']}\"` : ``}${node.attrs.id ? ` id=\"${node.attrs.id}\"` : ``}>${sanitizeHTML(next(node.children))}</h4>`\n    },\n    [NodeType.HEADING_5]:(node: Node, next: Next) => {\n        return `<h5${node.attrs.style ? ` style=\"${node.attrs.style}\"` : ``}${node.attrs['class-name'] ? ` class=\"${node.attrs['class-name']}\"` : ``}${node.attrs.id ? ` id=\"${node.attrs.id}\"` : ``}>${sanitizeHTML(next(node.children))}</h5>`\n    },\n    [NodeType.HEADING_6]:(node: Node, next: Next) => {\n        return `<h6${node.attrs.style ? ` style=\"${node.attrs.style}\"` : ``}${node.attrs['class-name'] ? ` class=\"${node.attrs['class-name']}\"` : ``}${node.attrs.id ? ` id=\"${node.attrs.id}\"` : ``}>${sanitizeHTML(next(node.children))}</h6>`\n    },\n    [NodeType.ORDER_LIST]:(node: Node, next: Next) => {\n        return `<ol${node.attrs.style ? ` style=\"${node.attrs.style}\"` : ``}${node.attrs['class-name'] ? ` class=\"${node.attrs['class-name']}\"` : ``}${node.attrs.id ? ` id=\"${node.attrs.id}\"` : ``}>${sanitizeHTML(next(node.children))}</ol>`\n    },\n    [NodeType.FRAGMENT]:(node: Node, next: Next) => {\n        return `<fragment>${sanitizeHTML(next(node.children))}</fragment>`\n    },\n    [NodeType.UNORDER_LIST]:(node: Node, next: Next) => {\n        return `<ul${node.attrs.style ? ` style=\"${node.attrs.style}\"` : ``}${node.attrs['class-name'] ? ` class=\"${node.attrs['class-name']}\"` : ``}${node.attrs.id ? ` id=\"${node.attrs.id}\"` : ``}>${sanitizeHTML(next(node.children))}</ul>`\n    },\n    [NodeType.LIST_ITEM]:(node: Node, next: Next) => {\n        return `<li${node.attrs.style ? ` style=\"${node.attrs.style}\"` : ``}${node.attrs['class-name'] ? ` class=\"${node.attrs['class-name']}\"` : ``}${node.attrs.id ? ` id=\"${node.attrs.id}\"` : ``}>${sanitizeHTML(next(node.children))}</li>`\n    },\n    [NodeType.HR]:(node: Node, next: Next) => {\n        return `<hr>`\n    },\n    [NodeType.TABLE]: (node: Node, next: Next) => {\n        // Generate colgroup if colWidths attribute is present\n        let colgroupHTML = '';\n        if (node.attrs.colWidths && Array.isArray(node.attrs.colWidths)) {\n            const totalWidth = node.attrs.colWidths.reduce((sum, width) => sum + width, 0);\n            colgroupHTML = `<${NodeType.COL_GROUP} data-width=\"${totalWidth}\">`;\n            node.attrs.colWidths.forEach(colWidth => {\n                const widthPercentage = (colWidth / totalWidth) * 100;\n                colgroupHTML += `<${NodeType.COL} style=\"width:${widthPercentage.toFixed(2)}%\"/>`;\n            });\n            colgroupHTML += `</${NodeType.COL_GROUP}>`;\n        }\n    \n        // Generate table with colgroup and other attributes\n        return `<table${node.attrs.style ? ` style=\"${node.attrs.style}\"` : ``}` +\n               `${node.attrs['class-name'] ? ` class=\"${node.attrs['class-name']}\"` : ``}` +\n               `${node.attrs.id ? ` id=\"${node.attrs.id}\"` : ``}>` +\n               `${colgroupHTML}` +\n               `${sanitizeHTML(next(node.children))}` +\n               `</table>`;\n    },\n    [NodeType.TABLE_HEADER]:(node: Node, next: Next) => {\n        return `<thead${node.attrs.style ? ` style=\"${node.attrs.style}\"` : ``}${node.attrs['class-name'] ? ` class=\"${node.attrs['class-name']}\"` : ``}${node.attrs.id ? ` id=\"${node.attrs.id}\"` : ``}>${sanitizeHTML(next(node.children))}</thead>`\n    },\n    [NodeType.TABLE_BODY]:(node: Node, next: Next) => {\n        return `<tbody${node.attrs.style ? ` style=\"${node.attrs.style}\"` : ``}${node.attrs['class-name'] ? ` class=\"${node.attrs['class-name']}\"` : ``}${node.attrs.id ? ` id=\"${node.attrs.id}\"` : ``}>${sanitizeHTML(next(node.children))}</tbody>`\n    },\n    [NodeType.TABLE_FOOTER]:(node: Node, next: Next) => {\n        return `<tfoot${node.attrs.style ? ` style=\"${node.attrs.style}\"` : ``}${node.attrs['class-name'] ? ` class=\"${node.attrs['class-name']}\"` : ``}${node.attrs.id ? ` id=\"${node.attrs.id}\"` : ``}>${sanitizeHTML(next(node.children))}</tfoot>`\n    },\n    [NodeType.TABLE_ROW]:(node: Node, next: Next) => {\n        return `<tr${node.attrs.style ? ` style=\"${node.attrs.style}\"` : ``}${node.attrs['class-name'] ? ` class=\"${node.attrs['class-name']}\"` : ``}${node.attrs.id ? ` id=\"${node.attrs.id}\"` : ``}>${sanitizeHTML(next(node.children))}</tr>`\n    },\n    [NodeType.TABLE_HEAD]:(node: Node, next: Next) => {\n        if (node.attrs.void) return '';\n\n        return `<th` +\n                `${node.attrs.rowSpan ? ` rowspan=\"${node.attrs.rowSpan}\"` : ``}` +\n                `${node.attrs.colSpan ? ` colspan=\"${node.attrs.colSpan}\"` : ``}` +\n                `${node.attrs.style ? ` style=\"${node.attrs.style}\"` : ``}`+\n                `${node.attrs['class-name'] ? ` class=\"${node.attrs['class-name']}\"` : ``}`+\n                `${node.attrs.id ? ` id=\"${node.attrs.id}\"` : ``}>${sanitizeHTML(next(node.children))}` +\n                `</th>`\n    },\n    [NodeType.TABLE_DATA]:(node: Node, next: Next) => {\n        if (node.attrs.void) return '';\n\n        return `<td` +\n                `${node.attrs.rowSpan ? ` rowspan=\"${node.attrs.rowSpan}\"` : ``}` +\n                `${node.attrs.colSpan ? ` colspan=\"${node.attrs.colSpan}\"` : ``}` +\n                `${node.attrs.style ? ` style=\"${node.attrs.style}\"` : ``}`+\n                `${node.attrs['class-name'] ? ` class=\"${node.attrs['class-name']}\"` : ``}`+\n                `${node.attrs.id ? ` id=\"${node.attrs.id}\"` : ``}>${sanitizeHTML(next(node.children))}` +\n                `</td>`\n    },\n    [NodeType.BLOCK_QUOTE]:(node: Node, next: Next) => {\n        return `<blockquote${node.attrs['class-name'] ? ` class=\"${node.attrs['class-name']}\"` : ``}${node.attrs.id ? ` id=\"${node.attrs.id}\"` : ``}>${sanitizeHTML(next(node.children))}</blockquote>`\n    },\n    [NodeType.CODE]:(node: Node, next: Next) => {\n        return `<code${node.attrs['class-name'] ? ` class=\"${node.attrs['class-name']}\"` : ``}${node.attrs.id ? ` id=\"${node.attrs.id}\"` : ``}>${sanitizeHTML(next(node.children))}</code>`\n    },\n\n    ['reference']:(node: Node, next: Next) => {\n        if (node.attrs.type === 'asset') {\n            const src = encodeURI(node.attrs['asset-link']);\n            const alt = node.attrs?.['redactor-attributes']?.['alt'];\n            const link = node.attrs.link;\n            const target = node.attrs.target || \"\";\n            const caption = node.attrs?.['redactor-attributes']?.['asset-caption'] || node.attrs?.['asset-caption'] || \"\";\n            const style = node.attrs.style;\n            const asset_uid= node.attrs['asset-uid'];\n\n            let imageTag = `<img${asset_uid ? ` asset_uid=\"${asset_uid}\"` : `` }${node.attrs['class-name'] ? ` class=\"${sanitizeHTML(node.attrs['class-name'])}\"`: ``}${src ? ` src=\"${sanitizeHTML(src)}\"` : ``}${alt ? ` alt=\"${alt}\"` : `` }${target === \"_blank\" ? ` target=\"_blank\"` : `` }${style ? ` style=\"${style}\"` : `` } />`;\n\n            return `<figure${style ? ` style=\"${style}\"` : ''}>` +\n                    (link ? `<a href=\"${link}\" target=\"${target || \"\"}\">` : \"\") +\n                    imageTag +\n                    (link ? `</a>` : \"\") +\n                    (caption ? `<figcaption>${caption}</figcaption>` : \"\") +\n                    `</figure>`;\n        }\n        return ``\n    },\n    ['default']:(node: Node, next: Next) => {\n        return sanitizeHTML(next(node.children))\n    },\n\n    [MarkType.BOLD]:(text: string) => {\n        return `<strong>${sanitizeHTML(text)}</strong>`\n    },\n    [MarkType.ITALIC]:(text: string) => {\n        return `<em>${sanitizeHTML(text)}</em>`\n    },\n    [MarkType.UNDERLINE]:(text: string) => {\n        return `<u>${sanitizeHTML(text)}</u>`\n    },\n    [MarkType.STRIKE_THROUGH]:(text: string) => {\n        return `<strike>${sanitizeHTML(text)}</strike>`\n    },\n    [MarkType.INLINE_CODE]:(text: string) => {\n        return `<span data-type='inlineCode'>${sanitizeHTML(text)}</span>`\n    },\n    [MarkType.SUBSCRIPT]:(text: string) => {\n        return `<sub>${sanitizeHTML(text)}</sub>`\n    },\n    [MarkType.SUPERSCRIPT]:(text: string) => {\n        return `<sup>${sanitizeHTML(text)}</sup>`\n    },\n    [MarkType.BREAK]:(text: string) => {\n        return `<br />${sanitizeHTML(text)}`\n    },\n    [MarkType.CLASSNAME_OR_ID]:(text: string, classname: string, id:string) => {\n        return `<span${classname ? ` class=\"${classname}\"` : ``}${id ? ` id=\"${id}\"` : ``}>${sanitizeHTML(text)}</span>`\n    }\n\n}\n", "enum StyleType {\n  BLOCK = 'block',\n  INLINE = 'inline',\n  LINK = 'link',\n  DISPLAY = 'display',\n  DOWNLOAD = 'download'\n}\n\nexport default StyleType;\n", "import StyleType from '../embedded-types/style-type';\nimport { RenderOption } from '.';\nimport { Metadata } from '../Models/metadata-model';\nimport { EmbeddedItem } from '../Models/embedded-object';\nimport { EntryNode } from '../Models/json-rte-model';\nimport { sanitizeHTML } from '../helper/sanitize'\n\nexport const defaultOptions: RenderOption = {\n  [StyleType.BLOCK]: (item: EmbeddedItem | EntryNode) => {\n    const title = sanitizeHTML(item.title || item.uid);\n    const content_type_uid = sanitizeHTML(item._content_type_uid || (item.system ? item.system.content_type_uid : ''));\n    return `<div><p>${title}</p><p>Content type: <span>${content_type_uid}</span></p></div>`;\n  },\n  [StyleType.INLINE]: (item: EmbeddedItem | EntryNode) => {\n    const title = sanitizeHTML(item.title || item.uid);\n    return `<span>${title}</span>`;\n  },\n  [StyleType.LINK]: (item: EmbeddedItem | EntryNode, metadata: Metadata) => {\n    const url = encodeURI(sanitizeHTML(item.url || 'undefined'));\n    const text = sanitizeHTML(metadata.text || item.title || item.uid || (item.system ? item.system.uid : ''));\n    return `<a href=\"${url}\">${text}</a>`;\n  },\n  [StyleType.DISPLAY]: (item: EmbeddedItem | EntryNode, metadata: Metadata) => {\n    const url = encodeURI(sanitizeHTML(item.url || 'undefined'));\n    const alt = sanitizeHTML(metadata.attributes.alt || item.title || item.filename || item.uid\n      || (item.system ? item.system.uid : ''));\n    return `<img src=\"${url}\" alt=\"${alt}\" />`;\n  },\n  [StyleType.DOWNLOAD]: (item: EmbeddedItem | EntryNode, metadata: Metadata) => {\n    const href = encodeURI(sanitizeHTML(item.url || 'undefined'));\n    const text = sanitizeHTML(metadata.text || item.title || item.uid || (item.system ? item.system.content_type_uid : ''));\n    return `<a href=\"${href}\">${text}</a>`;\n  },\n};\n", "import { defaultOptions } from '../options/default-options';\nimport { EntryEmbedable, EmbeddedItem } from '../Models/embedded-object';\nimport { RenderOption, RenderContentType, RenderItem } from '../options/index';\nimport { EntryAttributes, Metadata } from '../Models/metadata-model';\nimport { EntryNode } from '../Models/json-rte-model';\n\n// This function will find Embedded object present in string\nexport function findEmbeddedEntry(\n  uid: string,\n  contentTypeUid: string,\n  embeddeditems: (EmbeddedItem| EntryNode)[] = [],\n): (EmbeddedItem | EntryNode)[] {\n  return embeddeditems.filter((entry: any) => {\n    if ((entry.uid && (entry as EmbeddedItem).uid === uid && (entry as EmbeddedItem)._content_type_uid === contentTypeUid)|| (entry.system && (entry as EntryNode).system.uid === uid && (entry as EntryNode).system.content_type_uid === contentTypeUid)) {\n      return entry;\n    }\n  });\n}\n\nexport function findEmbeddedAsset(uid: string, embeddedAssets: (EmbeddedItem| EntryNode)[] = []): (EmbeddedItem| EntryNode)[] {\n  return embeddedAssets.filter((asset: any) => {\n    if ((asset.uid && (asset as EmbeddedItem).uid === uid) || asset.system && (asset as EntryNode).system.uid === uid) {\n      return asset;\n    }\n  });\n}\n\nexport function findGQLEmbeddedItems(metadata: Metadata, items: (EmbeddedItem| EntryNode)[]): (EmbeddedItem| EntryNode)[] {\n  if (metadata.itemType === 'entry') {\n    return findEmbeddedEntry(\n        metadata.itemUid,\n        metadata.contentTypeUid,\n        items\n        );\n  } else {\n    return findEmbeddedAsset(\n        metadata.itemUid, \n        items\n        );\n  }\n}\n\nexport function findEmbeddedItems(object: Metadata, entry: EntryEmbedable): (EmbeddedItem| EntryNode)[] {\n  if (object && object !== undefined && entry && entry !== undefined) {\n    if (entry._embedded_items !== undefined) {\n      const entryEmbedable = entry\n      const items = Object.values(entryEmbedable._embedded_items || []).reduce((accumulator, value) => accumulator.concat(value), [])\n      return findGQLEmbeddedItems(object, items)\n    }\n  }\n  return [];\n}\n\nexport function findRenderString(\n  item: EmbeddedItem | EntryNode,\n  metadata: Metadata,\n  renderOptions?: RenderOption,\n): string {\n  if ((!item && item === undefined) || (!metadata && metadata === undefined)) {\n    return '';\n  }\n  \n  if (renderOptions && renderOptions[metadata.styleType] !== undefined) {\n    const renderFunction = renderOptions[metadata.styleType] as RenderItem;\n\n     if (\n      (metadata.attributes as EntryAttributes)['data-sys-content-type-uid'] !== undefined &&\n      typeof renderFunction !== 'function' &&\n      renderFunction[(metadata.attributes as EntryAttributes)['data-sys-content-type-uid']] !== undefined\n    ) {\n      return (renderFunction as RenderContentType)[(metadata.attributes as EntryAttributes)['data-sys-content-type-uid']](item, metadata);\n    } else if (\n      (metadata.attributes as EntryAttributes)['data-sys-content-type-uid'] !== undefined &&\n      typeof renderFunction !== 'function' &&\n      (renderFunction as RenderContentType).$default !== undefined\n    ) {\n      return (renderFunction as RenderContentType).$default(item, metadata);\n    } else if (\n      metadata.contentTypeUid !== undefined &&\n      typeof renderFunction !== 'function' &&\n      renderFunction[metadata.contentTypeUid] !== undefined\n    ) {\n      return (renderFunction as RenderContentType)[metadata.contentTypeUid](item, metadata)\n    } else if (\n      metadata.contentTypeUid !== undefined &&\n      typeof renderFunction !== 'function' &&\n      (renderFunction as RenderContentType).$default !== undefined\n    ) {\n      return (renderFunction as RenderContentType).$default(item, metadata);\n    }  else if (typeof renderFunction === 'function') {\n      return renderFunction(item, metadata);\n    }\n  }\n  const defaultRenderFunction = defaultOptions[metadata.styleType] as RenderItem;  \n  return defaultRenderFunction(item, metadata);\n}\n", "import { AnyNode } from '../json-to-html';\nimport { EmbeddedItem, EntryEmbedable } from '../Models/embedded-object';\nimport { Metadata, nodeToMetadata, styleObjType } from '../Models/metadata-model';\nimport MarkType from '../nodes/mark-type';\nimport TextNode from '../nodes/text-node';\nimport Node from '../nodes/node';\nimport Document from '../nodes/document';\nimport { Next, RenderMark, RenderNode, RenderOption } from '../options';\nimport { defaultNodeOption } from '../options/default-node-options';\nimport { findRenderString } from './find-embeded-object';\nimport { EntryNode } from '../Models/json-rte-model';\n\nexport function enumerate(\n  entries: EntryEmbedable[] | EmbeddedItem[],\n  process: (entry: EntryEmbedable | EmbeddedItem) => void,\n) {\n  for (const entry of entries) {\n    process(entry);\n  }\n}\n\nexport function enumerateContents(\n  content: Document | Document[],\n  renderOption?: RenderOption,\n  renderEmbed?: (metadata: Metadata) => EmbeddedItem | EntryNode,\n): string | string[] {\n  if (!(content instanceof Array) && content.type !== 'doc') {\n    return content as unknown as string;\n  }\n  if (content instanceof Array) {\n    const result: string[] = [];\n    content.forEach((doc) => {\n      result.push(enumerateContents(doc, renderOption, renderEmbed) as string);\n    });\n    return result;\n  }\n  const commonRenderOption = {\n    ...defaultNodeOption,\n    ...renderOption,\n  };\n  return nodeChildrenToHTML(content.children, commonRenderOption, renderEmbed);\n}\n\nexport function textNodeToHTML(node: TextNode, renderOption: RenderOption): string {\n  let text = replaceHtmlEntities(node.text);\n  if (node.classname || node.id) {\n    text = (renderOption[MarkType.CLASSNAME_OR_ID] as RenderMark)(text, node.classname, node.id);\n  }\n  if (node.break) {\n    text = (renderOption[MarkType.BREAK] as RenderMark)(text);\n  }\n  if (node.superscript) {\n    text = (renderOption[MarkType.SUPERSCRIPT] as RenderMark)(text);\n  }\n  if (node.subscript) {\n    text = (renderOption[MarkType.SUBSCRIPT] as RenderMark)(text);\n  }\n  if (node.inlineCode) {\n    text = (renderOption[MarkType.INLINE_CODE] as RenderMark)(text);\n  }\n  if (node.strikethrough) {\n    text = (renderOption[MarkType.STRIKE_THROUGH] as RenderMark)(text);\n  }\n  if (node.underline) {\n    text = (renderOption[MarkType.UNDERLINE] as RenderMark)(text);\n  }\n  if (node.italic) {\n    text = (renderOption[MarkType.ITALIC] as RenderMark)(text);\n  }\n  if (node.bold) {\n    text = (renderOption[MarkType.BOLD] as RenderMark)(text);\n  }\n  return text;\n}\nexport function referenceToHTML(\n  node: Node,\n  renderOption: RenderOption,\n  renderEmbed?: (metadata: Metadata) => EmbeddedItem | EntryNode,\n): string {\n  if ((node.attrs.type === 'entry' || node.attrs.type === 'asset') && node.attrs['display-type'] === 'link') {\n    const entryText = node.children ? nodeChildrenToHTML(node.children, renderOption, renderEmbed) : '';\n\n    let aTagAttrs = `${node.attrs.style ? ` style=\"${node.attrs.style}\"` : ``}${node.attrs['class-name'] ? ` class=\"${node.attrs['class-name']}\"` : ``}${node.attrs.id ? ` id=\"${node.attrs.id}\"` : ``} href=\"${node.attrs.href || node.attrs.url}\"`;\n    if (node.attrs.target) {\n      aTagAttrs +=` target=\"${node.attrs.target}\"`;\n    }\n    if(node.attrs.type == 'asset') {\n      aTagAttrs += ` type=\"asset\" content-type-uid=\"sys_assets\" ${node.attrs['asset-uid'] ? `data-sys-asset-uid=\"${node.attrs['asset-uid']}\"` : ``} sys-style-type=\"download\"`\n    }\n    const aTag = `<a${aTagAttrs}>${entryText}</a>`;\n    return aTag;\n  }\n  \n  function sendToRenderOption(referenceNode: Node): string {\n    return (renderOption[referenceNode.type] as RenderNode)(referenceNode, undefined);\n  }\n \n  if (!renderEmbed && renderOption[node.type] !== undefined) {\n    return sendToRenderOption(node);\n  }\n  if (!renderEmbed) {\n    return '';\n  }\n  const metadata = nodeToMetadata(\n    node.attrs,\n    (node.children && node.children.length > 0 ? node.children[0] : {}) as unknown as TextNode,\n  );\n  const item = renderEmbed(metadata);\n  if (!item && renderOption[node.type] !== undefined) {\n    return sendToRenderOption(node);\n  }\n  \n  return findRenderString(item, metadata, renderOption);\n\n}\n\nfunction nodeChildrenToHTML(\n  nodes: AnyNode[],\n  renderOption: RenderOption,\n  renderEmbed?: (metadata: Metadata) => EmbeddedItem | EntryNode,\n): string {\n  return nodes.map<string>((node: AnyNode) => nodeToHTML(node, renderOption, renderEmbed)).join('');\n}\n\nfunction styleObjectToString(styleObj: styleObjType): string {\n  if (!styleObj) return '';\n  if (typeof styleObj === 'string') {\n    return styleObj;\n  }\n  let styleString: string = '';\n  for (const key in styleObj) {\n    if (styleObj.hasOwnProperty(key)) {\n      const value = styleObj[key];\n      styleString += `${key}:${value};`;\n    }\n  }\n  return styleString;\n}\n\nfunction nodeToHTML(\n  node: AnyNode,\n  renderOption: RenderOption,\n  renderEmbed?: (metadata: Metadata) => EmbeddedItem | EntryNode,\n): string {\n  if (node?.attrs?.style) {\n    node.attrs.style = styleObjectToString(node.attrs.style as styleObjType);\n  }\n  if (!node.type) {\n    return textNodeToHTML(node as TextNode, renderOption);\n  } else if ((node.type as string) === 'reference') {\n    return referenceToHTML(node, renderOption, renderEmbed);\n  } else {\n    const next: Next = (nodes) => nodeChildrenToHTML(nodes, renderOption, renderEmbed);\n    if (renderOption[node.type] !== undefined) {\n      return (renderOption[node.type] as RenderNode)(node, next);\n    } else {\n      return (renderOption.default as RenderNode)(node, next);\n    }\n  }\n}\n\nexport function replaceHtmlEntities(text: string): string {\n  return text\n    .replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;')\n}\n\nexport const forbiddenAttrChars = ['\"', \"'\", '>','<', '/', '='];", "import StyleType from '../embedded-types/style-type';\nimport TextNode from '../nodes/text-node';\nimport { replaceHtmlEntities, forbiddenAttrChars } from '../helper/enumerate-entries';\n\nexport interface Metadata {\n  text: string;\n  attributes: Attributes;\n\n  itemUid: string | undefined;\n  itemType: 'entry' | 'asset' | undefined;\n  styleType: StyleType | undefined;\n  contentTypeUid: string | undefined;\n}\n\nexport interface Attributes {\n  type?: 'entry' | 'asset';\n  class?: string;\n  id?: string;\n  [key: string]: any;\n  style?: styleObjType | string;\n  'sys-style-type'?: string;\n}\nexport type styleObjType = { [key: string]: any };\n\nexport interface EntryAttributes extends Attributes {\n  'data-sys-entry-uid': string;\n  'data-sys-entry-local': string;\n  'data-sys-content-type-uid': string;\n}\n\nexport interface AssetAttributes extends Attributes {\n  'data-sys-asset-uid': string;\n  'data-sys-asset-filelink': string;\n  'data-sys-asset-contenttype': string;\n}\n\nexport function createMetadata(attribute: Attributes): Metadata {\n  return {\n    text: attribute['#text'],\n    itemUid: attribute['data-sys-entry-uid'] || attribute['data-sys-asset-uid'],\n    itemType: attribute.type,\n    styleType: attribute['sys-style-type'] as StyleType,\n    attributes: attribute,\n    contentTypeUid: attribute['data-sys-content-type-uid'],\n  };\n}\n\nexport function nodeToMetadata(attribute: Attributes, textNode: TextNode): Metadata {\n  return {\n    text: textNode.text,\n    itemUid: attribute['entry-uid'] || attribute['asset-uid'],\n    itemType: attribute.type,\n    styleType: attribute['display-type'] as StyleType,\n    attributes: attribute,\n    contentTypeUid: attribute['content-type-uid'],\n  };\n}\n\nexport function attributeToString(attributes: Attributes): string {\n  let result = '';\n  for (const key in attributes) {\n    if (Object.prototype.hasOwnProperty.call(attributes, key)) {\n      if (forbiddenAttrChars.some(char => key.includes(char))) {\n        continue;\n      }\n      let value = attributes[key];\n      if (Array.isArray(value)) {\n        value = value.join(', ');\n      } else if (typeof value === 'object') {\n        let elementString = '';\n        for (const subKey in value) {\n          if (Object.prototype.hasOwnProperty.call(value, subKey)) {\n            const subValue = value[subKey];\n            if (subValue != null && subValue !== '') {\n              elementString += `${subKey}:${subValue}; `;\n            }\n          }\n        }\n        value = elementString;\n      }\n      result += ` ${key}=\"${replaceHtmlEntities(String(value))}\"`;\n    }\n  }\n  return result;\n}\n", "\nexport function elementToJson(element: Element): object {\n  let obj: any = { }\n  for (let i = 0; i<element.attributes.length; i++) {\n    obj[element.attributes.item(i).name] = element.attributes.item(i).value\n  }\n  \n  element.childNodes.forEach((chileNode) => {\n    const node: ChildNode = (chileNode)\n    obj = {\n      ...obj,\n      ...parseElement(node)\n    }\n  })\n  return obj\n}\n\nfunction parseElement(node: ChildNode): any {\n  const obj: any = {}\n  if (node.nodeType === 3) {\n    obj['#text'] = node.textContent;\n  }else if (node.nodeType === 1) {\n    obj[node.nodeName.toLowerCase()] = elementToJson(node as Element)\n  }\n  return obj\n}", "import { elementToJson } from '../helper/html-to-json';\nimport { Metadata, createMetadata, Attributes } from '../Models/metadata-model';\nconst frameflag = 'documentfragmentcontainer';\n\ndeclare global {\n  interface String {\n    forEachEmbeddedItem(callbackfn: (embededObjectTag: string, object: Metadata) => void): void;\n  }\n}\n\nString.prototype.forEachEmbeddedItem = function (\n  callbackfn: (embededObjectTag: string, object: Metadata) => void,\n): void {\n\n  const str = `<${frameflag}>${this.toString()}</${frameflag}>`;\n  const root = (new DOMParser()).parseFromString(str, 'text/html')\n  const embeddedEntries = root.querySelectorAll(\".embedded-entry\")\n  \n  embeddedEntries.forEach((element) => {    \n    callbackfn(element.outerHTML, createMetadata(elementToJson(element) as Attributes))\n  })\n  const embeddedAsset = root.querySelectorAll(\".embedded-asset\")\n  embeddedAsset.forEach((element) => {\n    callbackfn(element.outerHTML, createMetadata(elementToJson(element) as Attributes))\n  })\n};\n", "import { EntryEmbedable } from '../Models/embedded-object';\nexport function findRenderContent<Type>(keyPaths: string, entry: EntryEmbedable, render: (content: Type) => (string| string[])){\n     getContent(keyPaths.split(\".\"), entry, render)\n}\n\nexport function getContent<Type>(keys: string[], object: any, render: (content: Type) => (string| string[])) {\n    if (keys) {\n        const key = keys[0]\n        if (keys.length === 1 && object[key]) {\n            object[key] = render(object[key])\n        } else if (keys.length > 0) {\n            if (object[key]) {\n                const newKeys = keys.slice(1)\n                if (Array.isArray(object[key])) {\n                    // tslint:disable-next-line: prefer-for-of\n                    for (const objKey of object[key]) {\n                        getContent(newKeys, objKey, render)\n                    }\n                } else if (typeof object[key] === 'object') {\n                    getContent(newKeys, object[key], render)\n                }\n            }\n        }\n    }\n}", "import './extensions'\nimport { Option, RenderOption } from './options';\nimport { Metadata } from './Models/metadata-model';\nimport { findEmbeddedItems, findRenderString } from './helper/find-embeded-object';\nimport { EntryEmbedable } from './Models/embedded-object';\nimport { findRenderContent } from './helper/find-render-content';\n/**\n * \n * @param {EntryEmbedable| EntryEmbedable[]} entry - Objects that contains RTE with embedded objects\n * @param {string[]} paths - Key paths for RTE contents in Entry object\n * @param {RenderOption?} renderOption -  Optional render options to render content\n */\nexport function render(option: { \n    entry: EntryEmbedable| EntryEmbedable[],\n    renderOption?: RenderOption,\n    paths?: string[]\n}) {\n\n    function findContent(path: string, entry: EntryEmbedable) {\n        findRenderContent(path, entry, (content: string| string[]) => {\n            return renderContent(content, { entry, renderOption: option.renderOption })\n        })\n    }\n\n    function findAndRender (entry: EntryEmbedable) {\n        if (!option.paths || option.paths.length === 0) {\n            Object.keys({ \n                ...entry._embedded_items,\n            }).forEach((path) => {\n                findContent(path, entry)\n            })\n        } else {\n            option.paths.forEach((path) => {\n                findContent(path, entry)\n            })\n        }\n    }\n\n    if (option.entry instanceof Array) {\n        option.entry.forEach((entry) => {\n            findAndRender(entry)\n        })\n    }else {\n        findAndRender(option.entry)\n    }\n}\n\n/**\n * \n * @param {string | string[]} content - RTE content to render \n * @param {EntryEmbedable} options.entry - Entry object containing embedded objects\n * @param {RenderOption?} options.renderOption - Optional render options to render content\n */\nexport function renderContent(content: (string | string[]), option: Option): (string| string[]) {\n    // return blank if content not present\n    if (!content || content === undefined) {\n        return ''\n    }\n\n    // render content of type string\n    if (typeof content === 'string') {\n        let contentToReplace = content\n        content.forEachEmbeddedItem((embededObjectTag: string, object: Metadata) => {\n            contentToReplace = findAndReplaceEmbeddedItem(\n                contentToReplace,\n                embededObjectTag, \n                object, \n                option)\n        })\n        return contentToReplace\n    }\n\n    // render content of type array of string\n    const resultContent: string[] = []\n    content.forEach((element) => {\n        resultContent.push(renderContent(element, option) as string)\n    })\n    return resultContent\n}\n\nfunction findAndReplaceEmbeddedItem(content:string, embededObjectTag: string, metadata: Metadata, option: Option): string {    \n    const embeddedObjects = findEmbeddedItems(metadata, option.entry)\n    const renderString = findRenderString(embeddedObjects[0], metadata, option.renderOption)\n    return content.replace(embededObjectTag, renderString)\n}\n", "import { AnyNode } from \"../json-to-html\"\nimport { Attributes } from \"../Models/metadata-model\"\nimport NodeType from \"./node-type\"\n\nexport default class Node {\n    type: NodeType\n    attrs: Attributes\n    children: AnyNode[]\n}", "import Node from \"./node\"\nimport NodeType from \"./node-type\"\n\nexport default class Document extends Node {\n    type: NodeType.DOCUMENT\n\n    constructor() {\n        super()\n        this.type = NodeType.DOCUMENT\n    }\n}", "import Node from \"./node\"\n\nexport default class TextNode extends Node {\n    bold?: boolean\n    italic?: boolean\n    underline?: boolean\n    strikethrough?: boolean\n    inlineCode?: boolean\n    superscript?: boolean\n    subscript?: boolean\n    break?: boolean\n    classname?: string\n    id?: string\n\n    text: string\n\n    constructor(text: string) {\n        super()\n        this.text = text\n    }\n}\n", "import Node from './nodes/node';\nimport TextNode from './nodes/text-node';\nimport Document from './nodes/document';\nimport { Metadata } from './Models/metadata-model';\nimport { EntryEmbedable } from './Models/embedded-object';\nimport { findRenderContent } from './helper/find-render-content';\nimport { RenderOption } from './options';\nimport { findEmbeddedItems } from './helper/find-embeded-object';\nimport { enumerate, enumerateContents } from './helper/enumerate-entries';\n\nexport type AnyNode = TextNode | Node;\n\nexport function jsonToHTML(option: { \n    entry: EntryEmbedable| EntryEmbedable[],\n    paths: string[],\n    renderOption?: RenderOption,\n}) {\n    if (option.entry instanceof Array) {\n        enumerate(option.entry, (entry: EntryEmbedable) => {\n            jsonToHTML({entry, paths: option.paths, renderOption: option.renderOption})\n        })\n    } else {\n        enumerateKeys({\n            entry: option.entry,\n            paths: option.paths,\n            renderOption: option.renderOption,\n        })\n    }\n}\n\nfunction enumerateKeys(option: { \n    entry: EntryEmbedable,\n    paths: string[],\n    renderOption?: RenderOption,\n}) {\n    for (const key of option.paths) {\n        findRenderContent(\n            key, \n            option.entry, \n            ((content: Document | Document[]) => {\n                return enumerateContents(\n                    content, \n                    option.renderOption, \n                    (metadata: Metadata) => {\n                        return findEmbeddedItems(metadata, option.entry)[0]\n                    }\n                )\n            })\n        )\n    }\n}\n", "import Node from './nodes/node';\nimport TextNode from './nodes/text-node';\nimport { RenderOption } from './options';\nimport { JsonRTE } from './Models/json-rte-model';\nimport { Metadata } from './Models/metadata-model';\nimport { findRenderContent } from './helper/find-render-content';\nimport { findGQLEmbeddedItems } from './helper/find-embeded-object';\nimport { EmbeddedItem, EntryEmbedable } from './Models/embedded-object';\nimport { enumerate, enumerateContents } from './helper/enumerate-entries';\n\nexport type AnyNode = TextNode | Node;\n\nfunction jsonToHTML(option: { \n    entry: EmbeddedItem| EmbeddedItem[],\n    paths: string[],\n    renderOption?: RenderOption,\n}) {\n    if (option.entry instanceof Array) {\n        enumerate(option.entry, (entry: EmbeddedItem) => {\n            jsonToHTML({entry, paths: option.paths, renderOption: option.renderOption})\n        })\n    } else {\n        enumerateKeys({\n            entry: option.entry,\n            paths: option.paths,\n            renderOption: option.renderOption,\n        })\n    }\n}\n\nfunction enumerateKeys(option: { \n    entry: EntryEmbedable,\n    paths: string[],\n    renderOption?: RenderOption,\n}) {\n    for (const key of option.paths) {\n        findRenderContent(key, \n            option.entry, \n            ((content: JsonRTE) => {\n            if (content && content.json) {\n                const edges = content.embedded_itemsConnection ? content.embedded_itemsConnection.edges : []\n                const items = Object.values(edges || []).reduce((accumulator, value) => accumulator.concat(value.node), [])\n                return enumerateContents(content.json, option.renderOption, (metadata: Metadata) => {\n                    return findGQLEmbeddedItems(metadata, items)[0]\n                })\n            }   \n            return content as unknown as string\n        }))\n    }\n}\nexport const GQL = {\n    jsonToHTML\n}", "import { EntryModel } from \".\"\n\n  export function addTags(entry: EntryModel, contentTypeUid: string, tagsAsObject: boolean, locale: string = 'en-us') : void {  \n      if (entry) { \n          const appliedVariants = entry._applied_variants || entry?.system?.applied_variants || null;\n         entry.$ = getTag(entry, `${contentTypeUid}.${entry.uid}.${locale}`, tagsAsObject, locale, {_applied_variants: appliedVariants, shouldApplyVariant: !!appliedVariants, metaKey: ''})      }  \n        }\n  \n  function getTag(content: object, prefix: string, tagsAsObject: boolean, locale: string, appliedVariants: {_applied_variants:{[key: string]: any}, shouldApplyVariant: boolean, metaKey: string}): object {\n      const tags: any = {}\n      const { metaKey, shouldApplyVariant, _applied_variants } = appliedVariants\n      Object.entries(content).forEach(([key, value]) => {      \n          if (key === '$') return\n          let metaUID = value && typeof value === 'object' && value._metadata && value._metadata.uid ? value._metadata.uid : '';\n          let updatedMetakey = appliedVariants.shouldApplyVariant ? `${appliedVariants.metaKey ? appliedVariants.metaKey + '.' : '' }${key}` : '';\n          if(metaUID && updatedMetakey) updatedMetakey = updatedMetakey + '.' + metaUID;\n          switch (typeof value) {\n              case \"object\":\n                  if (Array.isArray(value)) {\n                      value.forEach((obj, index) => {\n                          const childKey = `${key}__${index}`\n                          const parentKey = `${key}__parent`\n                          metaUID = value && typeof value === 'object' && obj._metadata && obj._metadata.uid ? obj._metadata.uid : '';\n                          updatedMetakey = appliedVariants.shouldApplyVariant ? `${appliedVariants.metaKey ? appliedVariants.metaKey + '.' : '' }${key}` : '';\n                          if(metaUID && updatedMetakey) updatedMetakey = updatedMetakey + '.' + metaUID;\n                          /**\n                           * Indexes of array are handled here\n                           * {\n                           *  \"array\": [\"hello\", \"world\"],\n                           *  \"$\": {\n                           *      \"array\": {\"data-cslp\": \"content_type_uid.entry_uid.locale.array\"}\n                           *      \"array__0\": {\"data-cslp\": \"content_type_uid.entry_uid.locale.array.0\"}\n                           *      \"array__1\": {\"data-cslp\": \"content_type_uid.entry_uid.locale.array.1\"}\n                           *  }\n                           * }\n                           */\n                          tags[childKey] = getTagsValue(`${prefix}.${key}.${index}`, tagsAsObject, { _applied_variants, shouldApplyVariant, metaKey: updatedMetakey })\n                          tags[parentKey] = getParentTagsValue(`${prefix}.${key}`, tagsAsObject)\n                          if (typeof obj !== 'undefined' && obj !== null && obj._content_type_uid !== undefined && obj.uid !== undefined) {\n                              /**\n                               * References are handled here\n                               * {\n                               *  \"reference\": [{\n                               *      \"title\": \"title\",\n                               *      \"uid\": \"ref_uid\",\n                               *      \"_content_type_uid\": \"ref_content_type_uid\",\n                               *     \"$\": {\"title\": {\"data-cslp\": \"ref_content_type_uid.ref_uid.locale.title\"}}\n                               *  }]\n                               * }\n                               */\n                              const newAppliedVariants = obj._applied_variants || obj?.system?.applied_variants || _applied_variants;\n                              const newShouldApplyVariant = !!newAppliedVariants\n                              value[index].$ = getTag(obj, `${obj._content_type_uid}.${obj.uid}.${obj.locale || locale}`, tagsAsObject, locale, {_applied_variants:newAppliedVariants, shouldApplyVariant:newShouldApplyVariant, metaKey: \"\"})\n                          }else if (typeof obj === \"object\") {\n                              /**\n                               * Objects inside Array like modular blocks are handled here\n                               * {\n                               *  \"array\": [{\n                               *    \"title\": \"title\",\n                               *    \"$\": {\"title\": {\"data-cslp\": \"content_type_uid.entry_uid.locale.array.0.title\"}}\n                               *  }]\n                               * }\n                               */\n                              obj.$ = getTag(obj,`${prefix}.${key}.${index}`, tagsAsObject, locale, {_applied_variants, shouldApplyVariant, metaKey: updatedMetakey})\n                          }\n                      })\n                  }else {\n                      if (value) {\n                          /**\n                           * Objects are handled here\n                           * {\n                           *  \"object\": {\n                           *      \"title\": \"title\",\n                           *      \"$\": {\n                           *          \"title\": {\"data-cslp\": \"content_type_uid.entry_uid.locale.object.title\"}\n                           *      }\n                           *  },\n                           * }\n                           */\n                          value.$ = getTag(value, `${prefix}.${key}`, tagsAsObject, locale, {_applied_variants, shouldApplyVariant, metaKey: updatedMetakey})\n                      }\n                  }\n                  /**\n                   * {\n                   *  \"object\": {\n                   *      \"title\": \"title\",\n                   *  },\n                   *  \"array\": [\"hello\", \"world\"]\n                   *  \"$\": {\n                   *      \"object\": {\"data-cslp\": \"content_type_uid.entry_uid.locale.object\"},\n                   *      \"array\": {\"data-cslp\": \"content_type_uid.entry_uid.locale.array\"}\n                   *  }\n                   * }\n                   */\n\n                  tags[key] = getTagsValue(`${prefix}.${key}`, tagsAsObject, { _applied_variants, shouldApplyVariant, metaKey: updatedMetakey })\n                  break;\n              default:\n                  /**\n                   * All primitive values are handled here\n                   * {\n                   *  \"title\": \"title\",\n                   *  \"$\": {title: {\"data-cslp\": \"content_type_uid.entry_uid.locale.title\"}}\n                   * }\n                   */\n                  tags[key] = getTagsValue(`${prefix}.${key}`, tagsAsObject, { _applied_variants, shouldApplyVariant, metaKey: updatedMetakey })\n          }\n      })\n      return tags\n  }\n  \nfunction getTagsValue (dataValue:string, tagsAsObject: boolean, appliedVariants: {_applied_variants: {[key: string]: any}, shouldApplyVariant: boolean, metaKey: string}): any {\n    if(appliedVariants.shouldApplyVariant && appliedVariants._applied_variants && appliedVariants._applied_variants[appliedVariants.metaKey]) {\n        const variant = appliedVariants._applied_variants[appliedVariants.metaKey]\n        // Adding v2 prefix to the cslp tag. New cslp tags are in v2 format. ex: v2:content_type_uid.entry_uid.locale.title\n        const newDataValueArray = ('v2:' + dataValue).split('.');\n        newDataValueArray[1] = newDataValueArray[1] + '_' + variant;\n        dataValue = newDataValueArray.join('.');\n    }\n    if (tagsAsObject) {\n        return { \"data-cslp\": dataValue };\n    } else {\n        return `data-cslp=${dataValue}`;\n    }\n}\n\nfunction getParentTagsValue (dataValue:string, tagsAsObject: boolean): any {\n    if (tagsAsObject) {\n        return { \"data-cslp-parent-field\": dataValue };\n    } else {\n        return `data-cslp-parent-field=${dataValue}`;\n    }\n}", "export function updateAssetURLForGQL(gqlResponse:any) {\n  try {\n    const response = gqlResponse?.data;\n    for (let contentType in response) {\n      if (\"items\" in response[contentType]) {\n        const entries = response[contentType].items;\n\n        entries.forEach((entry:any) => {              // iterate over all entries\n          processEntry(entry);\n        });\n      } else { \n        processEntry(response[contentType]);        \n       }\n    }\n  } catch (error) {\n    console.error('Error in updating asset URL for GQL response', error);\n  }\n}\n\nfunction processEntry(entry:any) {\n  for (let field in entry) {\n    const fieldData = entry[field];\n    if (fieldData instanceof Array) {\n      fieldData.forEach((data:any) => {\n        findRTEFieldAndUpdateURL(data);\n      });\n    } else if (fieldData && typeof fieldData === 'object') {\n      findRTEFieldAndUpdateURL(fieldData);\n    }\n  }\n}\n\nfunction findRTEFieldAndUpdateURL(fieldData:any) {\n  const rteField = findRTEField(fieldData);\n\n  if (!rteField) return;\n\n  const edges = rteField?.embedded_itemsConnection?.edges;\n  edges.forEach((edge:any) => {\n    const node = edge.node;\n    if (node?.url && node?.filename) {\n      \n      if (!node?.system?.uid) throw new Error('Asset UID not found in the response');\n\n      const correspondingAsset = rteField?.json?.children?.find((child:any) => child.attrs['asset-uid'] === node.system.uid);\n      correspondingAsset.attrs['asset-link'] = node.url;\n    }\n  });\n}\n\nfunction findRTEField(fieldData: any): any {\n  if (fieldData && fieldData.embedded_itemsConnection) {\n    return fieldData;\n  }\n  for (const key in fieldData) {\n    if (fieldData[key] && typeof fieldData[key] === 'object') {\n      const found = findRTEField(fieldData[key]);\n      if (found) {\n        return found;\n      }\n    }\n  }\n}"],
  "mappings": "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",
  "names": ["MarkType", "NodeType", "_a", "StyleType", "key", "render", "Node", "Document", "TextNode", "jsonToHTML", "enumerateKeys"]
}
